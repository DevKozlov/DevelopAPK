Функция ПолучитьПроверяемуюКонфигурациюПоGUID(GUID) Экспорт
	Результат = Справочники.Конфигурации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Конфигурации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Конфигурации КАК Конфигурации
		|ГДЕ
		|	Конфигурации.ИС_GUID = &ИС_GUID";
	
	Запрос.УстановитьПараметр("ИС_GUID", GUID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗапуститьПроверкуСВозвратомРезультата(GUID) Экспорт
	ПроверяемаяКонфигурация = ПолучитьПроверяемуюКонфигурациюПоGUID(GUID);
	Если НЕ ЗначениеЗаполнено(ПроверяемаяКонфигурация) Тогда
		Возврат СтрШаблон("no configuration match by ID %1", GUID);	
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ИС_ЗаданияПроверки.ПолучитьТекущийНомерЗадания();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерЗадания", НомерЗадания);
	СтруктураПараметров.Вставить("Конфигурация", ПроверяемаяКонфигурация);
	СтруктураПараметров.Вставить("Состояние", 	 Перечисления.ИС_СостоянияЗадачПроверок.ВОчереди);
	СтруктураПараметров.Вставить("ДатаДобавления", ТекущаяДата());

	ЗаписиОчереди = РегистрыСведений.ИС_ЗаданияПроверки.ПолучитьНаборЗаписей(СтруктураПараметров);
	Для каждого Запись из ЗаписиОчереди Цикл
		Если Запись.Состояние = Перечисления.ИС_СостоянияЗадачПроверок.ВыполняетсяПроверка Тогда
			Возврат СтрШаблон("A configuration check is already in progress <%1 (%2)>", ПроверяемаяКонфигурация, GUID);	
		ИначеЕсли Запись.Состояние = Перечисления.ИС_СостоянияЗадачПроверок.ВОчереди Тогда
			Возврат СтрШаблон("Verification of configuration <%1 (%2)> added in queue", ПроверяемаяКонфигурация, GUID);	
		КонецЕсли;
	КонецЦикла;
	
	Запись = ЗаписиОчереди.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметров);
	ЗаписиОчереди.Записать();
		
	Возврат СтрШаблон("Verification of configuration <%1 (%2)> added in queue", ПроверяемаяКонфигурация, GUID);
КонецФункции

Процедура ЗаполнитьПараметрыОбработки(ОбработкаЗапускПроверки, Конфигурация)
	ОбработкаЗапускПроверки.Конфигурация = Конфигурация;	
	ОбработкаЗапускПроверки.Версия = НайтиПоследнююВерсию(Конфигурация, ложь);
	
	ОбработкаЗапускПроверки.КаталогКонфигурации = Конфигурация.КаталогКонфигурации;
	ОбработкаЗапускПроверки.КаталогКонфигурацииКопия = ОбработкаЗапускПроверки.КаталогКонфигурации;
	ОбработкаЗапускПроверки.Пользователь = Конфигурация.Пользователь;
	ОбработкаЗапускПроверки.Пароль = Конфигурация.Пароль;
	
	ОбработкаЗапускПроверки.ИС_КаталогХранилища 	 = Конфигурация.КаталогХранилища;
	ОбработкаЗапускПроверки.ИС_ПользовательХранилища = Конфигурация.ПользовательХранилища;
	ОбработкаЗапускПроверки.ИС_ПарольХранилища       = Конфигурация.ПарольХранилища;
	
	ОбработкаЗапускПроверки.ИС_ФлажокВыполнятьРассылкуРезультатовПроверки = Конфигурация.ВыполнятьРассылкуРезультатовПроверки;

	Если ЗначениеЗаполнено(ОбработкаЗапускПроверки.ИС_КаталогХранилища) Тогда
		ОбработкаЗапускПроверки.ИС_ФлажокЗагрузитьКонфигурациюИзХранилища = Истина;
	КонецЕсли;
	
	ОбработкаЗапускПроверки.Сценарий = Конфигурация.Сценарий;
	
КонецПроцедуры

Функция ЗаполнитьСписокРасширений(Конфигурация, Сценарий)
	СписокРасширений = Новый СписокЗначений;
	ПустаяСсылкаРасширение = Справочники.Расширения.ПустаяСсылка();
	
	Если СписокРасширений = Неопределено Тогда
		
		СписокРасширений = Новый СписокЗначений;
		Если Сценарий = 0 Или Сценарий = 2 Тогда
			СписокРасширений.Добавить(ПустаяСсылкаРасширение);
		КонецЕсли;
		Если Сценарий >= 1 Тогда
			Расширения = Конфигурация.Расширения;
			Для Каждого СтрокаТаблицыРасширения Из Расширения Цикл
				СписокРасширений.Добавить(СтрокаТаблицыРасширения.Расширение);
			КонецЦикла;
		КонецЕсли;
		Возврат СписокРасширений;
	
	КонецЕсли;
	
	ЭлементСпискаРасширения = СписокРасширений.НайтиПоЗначению(ПустаяСсылкаРасширение);
	
	Если Сценарий = 0 Тогда
		
		СписокРасширений.Очистить();
		СписокРасширений.Добавить(ПустаяСсылкаРасширение);
		
	ИначеЕсли Сценарий = 1 Тогда
		
		Если ЭлементСпискаРасширения <> Неопределено Тогда
			СписокРасширений.Удалить(ЭлементСпискаРасширения);
		КонецЕсли;
		
	Иначе
		
		Если ЭлементСпискаРасширения = Неопределено Тогда
			СписокРасширений.Добавить(ПустаяСсылкаРасширение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокРасширений;
КонецФункции

Функция ПолучитьНастройкиХранилища(ОбработкаЗапускПроверки)
	
	НастройкиХранилища = Новый Структура;
	Если ОбработкаЗапускПроверки.ИС_ФлажокЗагрузитьКонфигурациюИзХранилища Тогда
		НастройкиХранилища.Вставить("КаталогХранилища", ОбработкаЗапускПроверки.ИС_КаталогХранилища);
		НастройкиХранилища.Вставить("ПользовательХранилища", ОбработкаЗапускПроверки.ИС_ПользовательХранилища);
		НастройкиХранилища.Вставить("ПарольХранилища", ОбработкаЗапускПроверки.ИС_ПарольХранилища);
	КонецЕсли;
	
	Возврат НастройкиХранилища;
	
КонецФункции

Процедура ЗафиксироватьОшибкуПриВыполненииПроверки(Конфигурация, Обработка, Статус = "")
	
	Если ЗначениеЗаполнено(Статус) Тогда
		Зафиксировать(Конфигурация, УровеньЖурналаРегистрации.Ошибка, Статус, Обработка.СтруктураПроверки.ЖурналПроверки);
	КонецЕсли;
	
	Обработка.ЗаписатьДокументПроверкиВерсии("Ошибка");
	
	ТекстПроверкаНеВыполнена = НСтр("ru='Во время проверки возникли ошибки. Проверка не выполнена.'");
	
	Если Обработка.ИС_ФлажокВыполнятьРассылкуРезультатовПроверки Тогда
		РаботаСПочтовымиСообщениями.ОтправитьПисьмаОтветственным(Обработка.ПроверкаВерсии, Обработка.СтруктураПроверки.ЖурналПроверки, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуКонфигурации(Конфигурация) Экспорт
	ЗаписьЖурналаРегистрации("Запуск проверки конфигурации", УровеньЖурналаРегистрации.Информация,,, 
							СтрШаблон("Старт проверки конфигурации %1", Конфигурация));
							
	ОбработкаЗапускПроверки = Обработки.ЗапускПроверки.Создать();
	ЗаполнитьПараметрыОбработки(ОбработкаЗапускПроверки, Конфигурация);
	
	ВариантПроверки = Конфигурация.ВариантПроверкиВручную;
	КэшУстановленныхФлажковТребований = ЗаполнитьТаблицуТребований(Конфигурация, ВариантПроверки);
	СписокРасширений = ЗаполнитьСписокРасширений(Конфигурация, ОбработкаЗапускПроверки.Сценарий);
	
	КэшУстановленныхФлажковСпискаОбъектов = Неопределено;
	ОбработкаЗапускПроверки.ПрочитатьОбъекты(КэшУстановленныхФлажковСпискаОбъектов);
	
	СоставОбъектовДляПроверки = ОбработкаЗапускПроверки.ПолучитьСоставОбъектовДляПроверки(Ложь, КэшУстановленныхФлажковСпискаОбъектов, СписокРасширений);
	ПроверитьВсеОбъекты = ?(СоставОбъектовДляПроверки.Количество() = 0, 0, 1);
	
	ОбработкаЗапускПроверки.СоздатьДокументПроверкиВерсии();
	СписокТребований = ОбработкаЗапускПроверки.ПолучитьСписокТребований(КэшУстановленныхФлажковТребований, 1); // 2 - проверка по ранее собранным данным
	КоличествоТребований = СписокТребований.Количество();
	
	ФлагПроверитьВсе = (ПроверитьВсеОбъекты = 0);
	СоставОбъектовДляПроверки = ОбработкаЗапускПроверки.ПолучитьСоставОбъектовДляПроверки(ФлагПроверитьВсе, КэшУстановленныхФлажковСпискаОбъектов, СписокРасширений);
	ОбработкаЗапускПроверки.ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	ОбработкаЗапускПроверки.СтруктураПроверки.Вставить("ВариантПроверки", ?(КоличествоТребований = "все",
		НСтр("ru='Полная'"),
		СтрШаблон(НСтр("ru='Выборочная (%1)'"), КоличествоТребований)));
		
	ВерсияМетаданных = Метаданные.Версия;
	Текст = НСтр("ru='Начало проверки. Версия АПК: %1. Выбрано требований: %2'");
	Текст = СтрШаблон(Текст, ВерсияМетаданных, КоличествоТребований);
	
	Зафиксировать(Конфигурация.Наименование, УровеньЖурналаРегистрации.Информация, Текст, ОбработкаЗапускПроверки.СтруктураПроверки.ЖурналПроверки);
	Если ФлагПроверитьВсе Тогда
		КэшУстановленныхФлажковСпискаОбъектов.Очистить();
	КонецЕсли;
	
	НастройкиХранилища = ПолучитьНастройкиХранилища(ОбработкаЗапускПроверки);
	
	ПроверитьПлатформуДляЗапускаПроверки = Истина;
	ПроверитьСоединениеСБазой = Истина;
	ЗагрузитьКонфигурациюИзХранилища = Истина;
	ПроверитьВерсиюКонфигурации = Истина;
	ОпределятьРежимЗапуска = Истина;
	ОчищатьСобранныеДанные = Ложь;
	ПостроитьСтруктуру = Ложь;
	ЭтапыПроверкиПоТребованиям = ОбработкаЗапускПроверки.ПолучитьЭтапыПроверкиПоТребованиям(СписокТребований);
	
	ПараметрыПроверки = ОбработкаЗапускПроверки.ЗаполнитьПараметрыПроверки(ЭтапыПроверкиПоТребованиям,
		ПроверитьПлатформуДляЗапускаПроверки,
		ПроверитьСоединениеСБазой,
		ЗагрузитьКонфигурациюИзХранилища,
		НастройкиХранилища,
		ПроверитьВерсиюКонфигурации,
		ОпределятьРежимЗапуска,
		ОчищатьСобранныеДанные,
		ПостроитьСтруктуру,
		Истина);
		
	Статус = ОбработкаЗапускПроверки.ЗапуститьПроверку(СписокТребований, СоставОбъектовДляПроверки, ПараметрыПроверки);
	ОбработкаЗапускПроверки.ОчиститьМассивВременныхФайлов();
	Если НЕ ПустаяСтрока(Статус) Тогда
		ЗафиксироватьОшибкуПриВыполненииПроверки(Конфигурация, ОбработкаЗапускПроверки, Статус);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗапускПроверки.ЗаписатьДокументПроверкиВерсии("Успешно");

	КоличествоОшибок = ОбработкаЗапускПроверки.СтруктураПроверки.ОбнаруженоОшибок;
	Если КоличествоОшибок = Неопределено Тогда
		КоличествоОшибок = ПолучитьОбщееКоличествоОшибокПослеПроверки(ОбработкаЗапускПроверки.Версия);
	КонецЕсли;
	
	Если КоличествоОшибок = 0 Тогда
		ТекстКоличествоОшибок = НСтр("ru='Ошибок не обнаружено'");
	Иначе
		ТекстКоличествоОшибок = СтрШаблон(НСтр("ru='Количество обнаруженных ошибок: %1'"), КоличествоОшибок);
	КонецЕсли;
	
	//Если ОбработкаЗапускПроверки.ИС_ФлажокВыполнятьРассылкуРезультатовПроверки Тогда
		РаботаСПочтовымиСообщениями.ОтправитьПисьмаОтветственным(ОбработкаЗапускПроверки.ПроверкаВерсии, ТекстКоличествоОшибок);
	//КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьРегламентнуюПроверку() Экспорт
	НачалоВыполнения = ТекущаяДата();
	НомерЗадания = РегистрыСведений.ИС_ЗаданияПроверки.ПолучитьТекущийНомерЗадания();
	РегистрыСведений.ИС_ЗаданияПроверки.УвеличитьНомерЗадания(НомерЗадания);
	
	// получаем конфигурации из очереди
	Конфигурации = РегистрыСведений.ИС_ЗаданияПроверки.ПолучитьКонфигурацииИзОчереди(НомерЗадания);
	РегистрыСведений.ИС_ЗаданияПроверки.УстановитьСтатусВыполняется(Конфигурации, НомерЗадания);
	
	МассивФоновыхЗаданий = Новый Массив;
	КоличествоПотоков = Константы.ИС_КоличествоЛогическихПроцессов.Получить();
	КоличествоПотоков = ?(КоличествоПотоков = 0, 2, КоличествоПотоков);
	
	ВсегоЦиклов = Цел(Конфигурации.Количество()/КоличествоПотоков);
	Остаток = Конфигурации.Количество() - ВсегоЦиклов*КоличествоПотоков;
	
	Для к = 1 по ВсегоЦиклов Цикл
		Для п = 1 по КоличествоПотоков Цикл
			Конфигурация = Конфигурации[(П - 1) + КоличествоПотоков * (К - 1)];
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Конфигурация);
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("ИС_МеханизмыПроверкиКонфигураций.ВыполнитьПроверкуКонфигурации", МассивПараметров, 
														Новый УникальныйИдентификатор, 
														СтрШаблон("Выполнить проверку конфигурации %1", Конфигурация));
			
			МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
		КонецЦикла;
		
		Если МассивФоновыхЗаданий.Количество() Тогда
			Попытка
				ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий);
			Исключение
				ЗаписьЖурналаРегистрации("Проверка конфигураций", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
		
	МассивФоновыхЗаданий = Новый Массив;	
	Для п = 1 по Остаток Цикл
		Конфигурация = Конфигурации[Конфигурации.Количество()-п];
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Конфигурация);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ИС_МеханизмыПроверкиКонфигураций.ВыполнитьПроверкуКонфигурации", МассивПараметров, 
													Новый УникальныйИдентификатор, 
													СтрШаблон("Выполнить проверку конфигурации %1", Конфигурация));
													
		МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
	КонецЦикла;
	
	Если МассивФоновыхЗаданий.Количество() Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий);
		Исключение
			ЗаписьЖурналаРегистрации("Проверка конфигураций", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	РегистрыСведений.ИС_ЗаданияПроверки.УстановитьСтатусЗавершено(Конфигурации, НомерЗадания);
	
	ЗаписьЖурналаРегистрации(СтрШаблон("Завершение обработки: Проверка конфигурации. Время выполнения %1 с.", ТекущаяДата() - НачалоВыполнения), УровеньЖурналаРегистрации.Информация);
КонецПроцедуры