Функция ПроизвестиПроверку(Знач ТипОбъекта, Знач ТипМодуля, ТекстМодуля) Экспорт
	Результат = "ок";
	
	НачатьТранзакцию();
	
	ТипОбъекта         = ПолучитьТипОбъекта(ТипОбъекта);
	Конфигурация       = СоздатьВременныйЭлементКонфигурации();
	Версия             = СоздатьВременныйЭлементВерсии(Конфигурация);
	ПроверяемыйЭлемент = СоздатьВременныйЭлементСтруктурыКонфигурации(ТипОбъекта, Версия);

	
	#Область СборСведенийОМодуле
	НаборыМодулей = ПолучитьНаборыМодулей();
	НаборМодулей  = НаборыМодулей[ТипОбъекта];
		
	Если НЕ ЗначениеЗаполнено(НаборМодулей) Тогда
		ОтменитьТранзакцию();
		Результат = "не удается определить модуля для указанного типа объекта";
	КонецЕсли;
	
	СведенияОбОбъектах = Новый Соответствие;
	
	Для Каждого Модуль Из НаборМодулей Цикл
		Если ЗначениеЗаполнено(ТипМодуля) И ТипМодуля <> Модуль Тогда
			Продолжить;
		КонецЕсли;
			
		ТаблицаБлоков = ПолучитьТаблицуБлоковМодуля(ТекстМодуля);
		
		СписокСведений = СведенияОбОбъектах[ПроверяемыйЭлемент];
		Если НЕ ЗначениеЗаполнено(СписокСведений) Тогда
			СписокСведений = Новый СписокЗначений;
		Иначе
			СписокСведений = СписокСведений.Получить();
		КонецЕсли;
		
		СписокСведений.Добавить(ВернутьХранилищеЗначения(ТекстМодуля), Модуль);
		СписокСведений.Добавить(ВернутьХранилищеЗначения(ТаблицаБлоков), Модуль + "Блоки");
		
		СведенияОбОбъектах.Вставить(ПроверяемыйЭлемент, ВернутьХранилищеЗначения(СписокСведений));
			
	КонецЦикла;
	
	ЗаписатьДанныеВИБ(ПроверяемыйЭлемент, СведенияОбОбъектах);
	#КонецОбласти //СборСведенийОМодуле

	
	Ядро = Обработки.Ядро.Создать();
	Ядро.УстановитьКонтекстРасширения(Неопределено);
	Ядро.УстановитьКонтекстВерсии(Версия);
	Ядро.УстановитьРегистрациюВТаблицу();
	Ядро.ЗаполнитьТаблицуИсключенийИзПроверки();

	СтруктураПроверяемогоОбъекта = Новый Структура("Ссылка, Код, Наименование, ТипОбъекта, Путь, Родитель, РодительТипОбъекта", 
													ПроверяемыйЭлемент, 
													ПроверяемыйЭлемент.Код, 
													ПроверяемыйЭлемент.Наименование, 
													ТипОбъекта, 
													"", 
													Справочники.СтруктураКонфигурации.ПустаяСсылка(), 
													Перечисления.ТипыОбъектов.ПустаяСсылка());
													
	Ядро.ПроверитьОбъект(Неопределено, СтруктураПроверяемогоОбъекта);
	
	ТаблицаРезультат = Ядро.НайденныеОшибки;
	ТаблицаРезультат.Колонки.Удалить("Объект");
	
	нпп = 1;
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаОшибки из ТаблицаРезультат Цикл
		
		МассивСтрок.Добавить(СтрШаблон("№%1 %2. %3	Уточнение: %4. %5	Место обнаружения: %6",
										нпп, 
										СтрокаОшибки.Ошибка, 
										Символы.ПС, 
										СтрокаОшибки.Уточнение, 
										Символы.ПС, 
										СтрокаОшибки.МестоОбнаружения));	
		нпп = нпп + 1;
	КонецЦикла;
	
	Если МассивСтрок.Количество() Тогда
		Результат = СтрСоединить(МассивСтрок, Символы.ПС);
	Иначе
		Результат = "Все хорошо!";	
	КонецЕсли;
	
	ОтменитьТранзакцию();	
	Возврат Результат;
КонецФункции

Функция СоздатьВременныйЭлементКонфигурации()
	
	ИдентификаторКонфигурации = СокрЛП(Новый УникальныйИдентификатор);	
	//
	Конфигурация = Справочники.Конфигурации.СоздатьЭлемент();
	Конфигурация.Наименование = ИдентификаторКонфигурации;
	Конфигурация.УстановитьНовыйКод();
	Конфигурация.ОбменДанными.Загрузка = истина;
	Конфигурация.Записать();

	Возврат Конфигурация.Ссылка;
КонецФункции

Функция СоздатьВременныйЭлементВерсии(Конфигурация)
	
	ИдентификаторВерсии		  = СокрЛП(Новый УникальныйИдентификатор);	
	
	Версия = Справочники.Версии.СоздатьЭлемент();
	Версия.Владелец = Конфигурация;
	Версия.Наименование = ИдентификаторВерсии;
	Версия.ПолныйНомер = "1.0.1";
	Версия.УстановитьНовыйКод();
	Версия.ДатаПубликации = ТекущаяДатаСеанса();
	Версия.ОбменДанными.Загрузка = истина;
	Версия.Записать();	

	Возврат Версия.Ссылка;
КонецФункции

Функция СоздатьВременныйЭлементСтруктурыКонфигурации(ТипОбъекта, Версия)
	
	ИдентификаторОбъекта	  = СокрЛП(Новый УникальныйИдентификатор);
		
	ПроверяемыйОбъект = Справочники.СтруктураКонфигурации.СоздатьЭлемент();
	ПроверяемыйОбъект.Наименование = ИдентификаторОбъекта;
	ПроверяемыйОбъект.УстановитьНовыйКод();
	ПроверяемыйОбъект.Владелец = Версия;
	ПроверяемыйОбъект.ТипОбъекта = ТипОбъекта;
	ПроверяемыйОбъект.ОбменДанными.Загрузка = истина;
	ПроверяемыйОбъект.Записать();
	
	Возврат ПроверяемыйОбъект.Ссылка;
КонецФункции

Функция ПолучитьТипОбъекта(ТипОбъекта)
	Попытка
		Результат = Перечисления.ТипыОбъектов[ТипОбъекта];
	Исключение
		Результат = Перечисления.ТипыОбъектов.ОбщийМодуль;	
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьНаборыМодулей()
	
	// Создаем шаблоны состава модулей.
	ПустойНаборМодулей = Новый Массив;
	
	НаборМодулей = Новый Массив;
	НаборМодулей.Добавить("Модуль");
	
	НаборМодулейМодульОбъекта = Новый Массив;
	НаборМодулейМодульОбъекта.Добавить("МодульОбъекта");
	
	НаборМодулейМодульМенеджера = Новый Массив;
	НаборМодулейМодульМенеджера.Добавить("МодульМенеджера");
	
	НаборМодулейОбъекта = Новый Массив;
	НаборМодулейОбъекта.Добавить("МодульОбъекта");
	НаборМодулейОбъекта.Добавить("МодульМенеджера");
	
	НаборМодулейРегистра = Новый Массив;
	НаборМодулейРегистра.Добавить("МодульНабораЗаписей");
	НаборМодулейРегистра.Добавить("МодульМенеджера");
	
	НаборМодулейКонфигурации = Новый Массив;
	НаборМодулейКонфигурации.Добавить("МодульСеанса");
	НаборМодулейКонфигурации.Добавить("МодульПриложения");
	НаборМодулейКонфигурации.Добавить("МодульОбычногоПриложения");
	НаборМодулейКонфигурации.Добавить("МодульУправляемогоПриложения");
	НаборМодулейКонфигурации.Добавить("МодульВнешнегоСоединения");
	
	НаборМодулейМодульМенеджераЗначения = Новый Массив;
	НаборМодулейМодульМенеджераЗначения.Добавить("МодульМенеджераЗначения");
	
	НаборМодулейКоманды = Новый Массив;
	НаборМодулейКоманды.Добавить("МодульКоманды");
	
	// Заполняем наборы для каждого типа прикладного объекта.
	СоответствиеНаборовМодулей = Новый Соответствие;
	
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.HTTPСервис,             		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.WebСервис,              		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.WSСсылка,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.БизнесПроцесс,          		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ВеткаМетаданных,        		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Графа,                  		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Документ,               		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ЖурналДокументов,       		НаборМодулейМодульМенеджера);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Задача,                 		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Значение,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Измерение,              		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Интерфейс,              		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Картинка,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Константа,              		НаборМодулейМодульМенеджераЗначения);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Конфигурация,           		НаборМодулейКонфигурации);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.КритерийОтбора,         		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Макет,                  		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Обработка,              		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ОбщаяФорма,             		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма,  		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ОбщийМакет,             		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ОбщийМодуль,            		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ОбщийРеквизит,          		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ОпределяемыйТип,        		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Отчет,                  		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПакетXDTO,              		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПараметрСеанса,         		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Перечисление,           		НаборМодулейМодульМенеджера);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПланВидовРасчета,       		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик, 		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПланОбмена,             		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПланСчетов,             		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПодпискаНаСобытия,      		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Подсистема,             		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.РегистрБухгалтерии,     		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.РегистрНакопления,      		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.РегистрРасчета,         		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.РегистрСведений,        		НаборМодулейРегистра);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.РегламентноеЗадание,    		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Реквизит,               		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.СтандартныйРеквизит,			ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Ресурс,                 		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Роль,                   		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Справочник,             		НаборМодулейОбъекта);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Стиль,                  		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ТабличнаяЧасть,         		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть, 	ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Форма,                  		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.УправляемаяФорма,       		НаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ЭлементСтиля,           		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Язык,                   		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ФункциональнаяОпция,    		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ХранилищеНастроек,      		НаборМодулейМодульМенеджера);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Команда, 				  		НаборМодулейКоманды);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ОбщаяКоманда,           		НаборМодулейКоманды);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ГруппаКоманд,           		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПараметрФункциональнойОпции, 	ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ПредопределенныйЭлемент, 		ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Операция, 					ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.Параметр, 					ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.ШаблонURL, 					ПустойНаборМодулей);
	СоответствиеНаборовМодулей.Вставить(Перечисления.ТипыОбъектов.МетодШаблонаURL, 				ПустойНаборМодулей);
	
	Возврат СоответствиеНаборовМодулей;
	
КонецФункции

Функция ПолучитьТаблицуБлоковМодуля(Знач ТекстМодуля)
	
	ТипыБлоков = Перечисления.ТипыБлоковМодулей;
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	ТаблицаБлоков.Колонки.Добавить("Блок");
	ТаблицаБлоков.Колонки.Добавить("НачальнаяСтрока");
	ТаблицаБлоков.Колонки.Добавить("КонечнаяСтрока");
	ТаблицаБлоков.Колонки.Добавить("ЕстьКомментарий");
	ТаблицаБлоков.Колонки.Добавить("ЕстьЭкспорт");
	ТаблицаБлоков.Колонки.Добавить("ДирективаКомпиляции");
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстМодуля);
	ВсегоСтрокМодуля = Текст.КоличествоСтрок();
	
	// Разбиваем текст модуля на блоки.
	ТекущийБлок = Неопределено;
	НачальнаяСтрока = 1;
	КонечнаяСтрока = 1;
	ЭтоКонецБлока = Истина;
	ЕстьЭкспорт = Неопределено;
	ЕстьКомментарий = Ложь;
	ДирективаКомпиляции = "";
	
	Для НомерСтроки = 1 По ВсегоСтрокМодуля Цикл
		
		СтрокаМодуляИсходная = Текст.ПолучитьСтроку(НомерСтроки);
		СтрокаМодуля = СокрЛП(СтрокаМодуляИсходная);
		СтрокаМодуля = ВРег(СтрокаМодуля);
		
		// Встретился случай неправильного определения процедуры:
		// ПроцедураПроверки  = Обработчик.ПроцедураПроверки;
		// Замена происходит для правильного определения блока, в функцию СтрНачинаетсяС() добавлены пробелы в строку поиска.
		
		// Для случаев "КонецФункции" и "КонецПроцедуры" пробелы не добавляем.
		// Встретился случай неправильного определения окончания функции:
		// КонецФункции// СформироватьЗапросПроверкиПриСменеСтатуса();
		
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, " ") + " ";
		
		Если НЕ ЭтоКонецБлока Тогда
			НовыйБлок = ТекущийБлок;
			Если НовыйБлок = ТипыБлоков.ОписаниеПеременной Тогда
				ЭтоКонецБлока = (СтрНайти(СтрокаМодуля, ";") > 0);
			ИначеЕсли НовыйБлок = ТипыБлоков.ЗаголовокПроцедуры
				  ИЛИ НовыйБлок = ТипыБлоков.ЗаголовокФункции Тогда
				
				ПозицияСкобки = (СтрНайти(СтрокаМодуля, ")") > 0);
				ЭтоКонецБлока = (ПозицияСкобки > 0);
				ЕстьЭкспорт = Ложь;
				Если ЭтоКонецБлока Тогда
					ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияСкобки);
					Если ПозицияКомментария > 0 Тогда
						СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
					КонецЕсли;
					ЕстьЭкспорт = (СтрНайти(СтрокаМодуля, "ЭКСПОРТ",, ПозицияСкобки) > 0);
				КонецЕсли;
			Иначе
				ЭтоКонецБлока = Истина;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
			НовыйБлок = ТипыБлоков.Комментарий;
			ЭтоКонецБлока = Истина;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПЕРЕМ ") Тогда
			НовыйБлок = ТипыБлоков.ОписаниеПеременной;
			ЭтоКонецБлока = (СтрНайти(СтрокаМодуля, ";") > 0);
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПРОЦЕДУРА ") Тогда
			НовыйБлок = ТипыБлоков.ЗаголовокПроцедуры;
			ЕстьЭкспорт = Ложь;
			
			ПозицияСкобки = СтрНайти(СтрокаМодуля, ")");
			ЭтоКонецБлока = ПозицияСкобки > 0;
			Если ЭтоКонецБлока Тогда
				ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияСкобки);
				Если ПозицияКомментария > 0 Тогда
					СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
				КонецЕсли;
				ЕстьЭкспорт = СтрНайти(СтрокаМодуля, "ЭКСПОРТ",, ПозицияСкобки) > 0;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦПРОЦЕДУРЫ") Тогда // пробел не добавляем (см. выше)
			НовыйБлок = ТипыБлоков.ОкончаниеПроцедуры;
			ЭтоКонецБлока = Истина;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ФУНКЦИЯ ") Тогда
			НовыйБлок = ТипыБлоков.ЗаголовокФункции;
			ЕстьЭкспорт = Ложь;
			
			ПозицияСкобки = СтрНайти(СтрокаМодуля, ")");
			ЭтоКонецБлока = ПозицияСкобки > 0;
			Если ЭтоКонецБлока Тогда
				ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияСкобки);
				Если ПозицияКомментария > 0 Тогда
					СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
				КонецЕсли;
				ЕстьЭкспорт = (СтрНайти(СтрокаМодуля, "ЭКСПОРТ",, ПозицияСкобки) > 0);
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦФУНКЦИИ") Тогда // пробел не добавляем (см. выше)
			НовыйБлок = ТипыБлоков.ОкончаниеФункции;
			ЭтоКонецБлока = Истина;
		Иначе
			НовыйБлок = ТипыБлоков.Операторы;
			ЭтоКонецБлока = Истина;
			
			Если СтрНачинаетсяС(СтрокаМодуля, "&") Тогда
				ДирективаКомпиляции = СтрокаМодуляИсходная;
			КонецЕсли;
		КонецЕсли;
		
		Если НовыйБлок = ТекущийБлок Тогда
			ЕстьКомментарий = (ЕстьКомментарий ИЛИ (СтрНайти(СтрокаМодуля, "//") > 0));
			КонечнаяСтрока = КонечнаяСтрока + 1;
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийБлок) Тогда
				
				НоваяЗаписьОБлоке = ТаблицаБлоков.Добавить();
				НоваяЗаписьОБлоке.Блок = ТекущийБлок;
				НоваяЗаписьОБлоке.ЕстьКомментарий = ЕстьКомментарий;
				НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
				НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
				
				ЭтоМетод = (ТекущийБлок = ТипыБлоков.ЗаголовокПроцедуры) ИЛИ (ТекущийБлок = ТипыБлоков.ЗаголовокФункции);
				Если ЭтоМетод Тогда
					НоваяЗаписьОБлоке.ЕстьЭкспорт = ЕстьЭкспорт;
				КонецЕсли;
				
				ЭтоПеременная = (ТекущийБлок = ТипыБлоков.ОписаниеПеременной);
				Если ЭтоМетод ИЛИ ЭтоПеременная Тогда
					НоваяЗаписьОБлоке.ДирективаКомпиляции = ДирективаКомпиляции;
					ДирективаКомпиляции = "";
				КонецЕсли;
				
			КонецЕсли;
			
			НачальнаяСтрока = НомерСтроки;
			КонечнаяСтрока  = НомерСтроки;
			ТекущийБлок = НовыйБлок;
			ЕстьКомментарий = (СтрНайти(СтрокаМодуля, "//") > 0);
			
		КонецЕсли;
		
		Если НомерСтроки = ВсегоСтрокМодуля Тогда
			
			НоваяЗаписьОБлоке = ТаблицаБлоков.Добавить();
			НоваяЗаписьОБлоке.Блок = ТекущийБлок;
			НоваяЗаписьОБлоке.ЕстьКомментарий = ЕстьКомментарий;
			НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
			НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
			
			ЭтоМетод = (ТекущийБлок = ТипыБлоков.ЗаголовокПроцедуры) ИЛИ (ТекущийБлок = ТипыБлоков.ЗаголовокФункции);
			Если ЭтоМетод Тогда
				НоваяЗаписьОБлоке.ЕстьЭкспорт = ЕстьЭкспорт;
			КонецЕсли;
			
			ЭтоПеременная = (ТекущийБлок = ТипыБлоков.ОписаниеПеременной);
			Если ЭтоМетод ИЛИ ЭтоПеременная Тогда
				НоваяЗаписьОБлоке.ДирективаКомпиляции = ДирективаКомпиляции;
				ДирективаКомпиляции = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаБлоков;
	
КонецФункции

Процедура ЗаписатьДанныеВИБ(ОбъектСсылка, СведенияОбОбъектах)

	Идентификаторы = Перечисления.ИдентификаторыСодержанияОбъектов;
	
	ИДСвойств = Новый Соответствие;
	ИДСвойств.Вставить("Тип",                           	Идентификаторы.Тип);
	ИДСвойств.Вставить("ТипПараметраКоманды",           	Идентификаторы.ТипПараметраКоманды);
	ИДСвойств.Вставить("Предопределенные",              	Идентификаторы.Предопределенные);
	ИДСвойств.Вставить("Подсистемы",                    	Идентификаторы.Подсистемы);
	ИДСвойств.Вставить("Форма",                         	Идентификаторы.Форма);
	ИДСвойств.Вставить("Макет",                         	Идентификаторы.Макет);
	ИДСвойств.Вставить("СодержимоеМакета",              	Идентификаторы.СодержимоеМакета);
	ИДСвойств.Вставить("СправочнаяИнформация",          	Идентификаторы.СправочнаяИнформация);
	ИДСвойств.Вставить("Модуль",                        	Идентификаторы.Модуль);
	ИДСвойств.Вставить("МодульБлоки",                   	Идентификаторы.МодульБлоки);
	ИДСвойств.Вставить("МодульКоманды",                 	Идентификаторы.МодульКоманды);
	ИДСвойств.Вставить("МодульКомандыБлоки",            	Идентификаторы.МодульКомандыБлоки);
	ИДСвойств.Вставить("МодульОбъекта",                 	Идентификаторы.МодульОбъекта);
	ИДСвойств.Вставить("МодульОбъектаБлоки",            	Идентификаторы.МодульОбъектаБлоки);
	ИДСвойств.Вставить("МодульНабораЗаписей",           	Идентификаторы.МодульНабораЗаписей);
	ИДСвойств.Вставить("МодульНабораЗаписейБлоки",      	Идентификаторы.МодульНабораЗаписейБлоки);
	ИДСвойств.Вставить("МодульСеанса",                  	Идентификаторы.МодульСеанса);
	ИДСвойств.Вставить("МодульСеансаБлоки",             	Идентификаторы.МодульСеансаБлоки);
	ИДСвойств.Вставить("МодульПриложения",              	Идентификаторы.МодульПриложения);
	ИДСвойств.Вставить("МодульПриложенияБлоки",         	Идентификаторы.МодульПриложенияБлоки);
	ИДСвойств.Вставить("МодульОбычногоПриложения",      	Идентификаторы.МодульОбычногоПриложения);
	ИДСвойств.Вставить("МодульОбычногоПриложенияБлоки", 	Идентификаторы.МодульОбычногоПриложенияБлоки);
	ИДСвойств.Вставить("МодульУправляемогоПриложения",  	Идентификаторы.МодульУправляемогоПриложения);
	ИДСвойств.Вставить("МодульУправляемогоПриложенияБлоки", Идентификаторы.МодульУправляемогоПриложенияБлоки);
	ИДСвойств.Вставить("МодульВнешнегоСоединения",      	Идентификаторы.МодульВнешнегоСоединения);
	ИДСвойств.Вставить("МодульВнешнегоСоединенияБлоки", 	Идентификаторы.МодульВнешнегоСоединенияБлоки);
	ИДСвойств.Вставить("МодульМенеджера",       			Идентификаторы.МодульМенеджера);
	ИДСвойств.Вставить("МодульМенеджераБлоки",  			Идентификаторы.МодульМенеджераБлоки);
	ИДСвойств.Вставить("МодульМенеджераЗначения",       	Идентификаторы.МодульМенеджераЗначения);
	ИДСвойств.Вставить("МодульМенеджераЗначенияБлоки",  	Идентификаторы.МодульМенеджераЗначенияБлоки);
	ИДСвойств.Вставить("Состав",  							Идентификаторы.Состав);
	ИДСвойств.Вставить("РеквизитыФормы",  					Идентификаторы.РеквизитыФормы);
	ИДСвойств.Вставить("ПараметрыФормы",  					Идентификаторы.ПараметрыФормы);
	ИДСвойств.Вставить("КомандыФормы",  					Идентификаторы.КомандыФормы);
	ИДСвойств.Вставить("КомандныйИнтерфейсФормы",  			Идентификаторы.КомандныйИнтерфейсФормы);
	ИДСвойств.Вставить("Расписание",  						Идентификаторы.РасписаниеРегламентногоЗадания);
	
	Счетчик = 0;
	СписокСвойствОбъекта = СведенияОбОбъектах[ОбъектСсылка];
	
	Счетчик = Счетчик + 1;
	
	Если ТипЗнч(СписокСвойствОбъекта) = Тип("ХранилищеЗначения") Тогда
		СписокСвойствОбъекта = СписокСвойствОбъекта.Получить();
	КонецЕсли;
	
	НаборЗаписейСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСвойств.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписейСвойств.Прочитать();
	
	НаборЗаписейСодержания = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейСодержания.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписейСодержания.Прочитать();
	
	ТаблицаНаборЗаписейСвойств	  = НаборЗаписейСвойств.Выгрузить();
	ТаблицаНаборЗаписейСодержания = НаборЗаписейСодержания.Выгрузить();
	
	ФлагТаблицаНаборЗаписейСвойствИзменена	  = Ложь;
	ФлагТаблицаНаборЗаписейСодержанияИзменена = Ложь;
	
	Для Каждого ЭлементСвойств Из СписокСвойствОбъекта Цикл
		ИдентификаторСодержания = ИДСвойств[ЭлементСвойств.Представление];
		
		Если ЗначениеЗаполнено(ИдентификаторСодержания)Тогда
			
			СтрокаТаблицы = ТаблицаНаборЗаписейСодержания.Найти(ИдентификаторСодержания, "Имя");
			
			Если СтрокаТаблицы = Неопределено Тогда
				НоваяЗапись 	   = ТаблицаНаборЗаписейСодержания.Добавить();
				НоваяЗапись.Имя	   = ИдентификаторСодержания;
				НоваяЗапись.Объект = ОбъектСсылка;
			Иначе
				НоваяЗапись		   = СтрокаТаблицы;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементСвойств.Значение) <> Тип("ХранилищеЗначения") Тогда
				ЭлементСвойств.Значение = ВернутьХранилищеЗначения(ЭлементСвойств.Значение);
			КонецЕсли;
			НоваяЗапись.Значение = ЭлементСвойств.Значение;
			
			ФлагТаблицаНаборЗаписейСодержанияИзменена = Истина;
			
		Иначе
			
			СтрокаТаблицы = ТаблицаНаборЗаписейСвойств.Найти(ЭлементСвойств.Представление, "Имя");
			
			Если СтрокаТаблицы = Неопределено Тогда
				НоваяЗапись		   = ТаблицаНаборЗаписейСвойств.Добавить();
				НоваяЗапись.Имя	   = ЭлементСвойств.Представление;
				НоваяЗапись.Объект = ОбъектСсылка;
			Иначе
				НоваяЗапись		   = СтрокаТаблицы;
			КонецЕсли;
			НоваяЗапись.Значение   = ОбрезатьСтрокуПоПоследнемуПробелу(ЭлементСвойств.Значение);
			
			ФлагТаблицаНаборЗаписейСвойствИзменена = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФлагТаблицаНаборЗаписейСодержанияИзменена Тогда
		НаборЗаписейСодержания.Загрузить(ТаблицаНаборЗаписейСодержания);
		НаборЗаписейСодержания.Записать(Истина);
		НаборЗаписейСодержания.Очистить();
	КонецЕсли;
	
	Если ФлагТаблицаНаборЗаписейСвойствИзменена Тогда
		НаборЗаписейСвойств.Загрузить(ТаблицаНаборЗаписейСвойств);
		НаборЗаписейСвойств.Записать(Истина);
		НаборЗаписейСвойств.Очистить();
	КонецЕсли;
		
	СведенияОбОбъектах.Очистить();
	
КонецПроцедуры

Функция ОбрезатьСтрокуПоПоследнемуПробелу(Знач Значение, КоличествоСимволов = 200)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если СтрДлина(Значение) <= КоличествоСимволов Тогда
		Возврат Значение;
	КонецЕсли;
	
	НовоеЗначение = Лев(Значение, КоличествоСимволов);
	
	МассивСлов = СтрРазделить(НовоеЗначение, " ", Ложь);
	КоличествоСлов = МассивСлов.Количество();
	Если КоличествоСлов = 1 Тогда
		Возврат НовоеЗначение;
	КонецЕсли;
	
	МассивСлов.Удалить(КоличествоСлов - 1);
	НовоеЗначение = "";
	Для Каждого Слово Из МассивСлов Цикл
		НовоеЗначение = НовоеЗначение + Слово + " ";
	КонецЦикла;
	
	Возврат НовоеЗначение;
	
КонецФункции

// Возвращает структуру с параметрами письма
//
Функция ПодготовитьПараметрыПисьма(ПараметрыПисьма)
	
	Если ПараметрыПисьма.ИмяПолучателя = Неопределено Тогда
		ПараметрыПисьма.ИмяПолучателя = ПараметрыПисьма.АдресПолучателя;
	КонецЕсли;
	
	Если ПараметрыПисьма.АдресОтправителя = Неопределено Тогда
		ПараметрыПисьма.АдресОтправителя = Константы.АдресЭлектроннойПочты.Получить();
	КонецЕсли;
	
	Если ПараметрыПисьма.ИмяОтправителя = Неопределено Тогда
		ПараметрыПисьма.ИмяОтправителя = Константы.ИмяОтправителя.Получить();
	КонецЕсли;
	
	Если ПараметрыПисьма.ПарольОтправителя = Неопределено Тогда
		ПараметрыПисьма.ПарольОтправителя = Константы.ПарольЭлектроннойПочты.Получить();
	КонецЕсли;
	
	Если ПараметрыПисьма.СерверИсходящейПочтыSMTP = Неопределено Тогда
		ПараметрыПисьма.СерверИсходящейПочтыSMTP = Константы.СерверИсходящейПочтыSMTP.Получить();
	КонецЕсли;
	
	Если ПараметрыПисьма.ПользовательИсходящейПочты = Неопределено Тогда
		ПараметрыПисьма.ПользовательИсходящейПочты = Константы.ПользовательИсходящейПочты.Получить();
	КонецЕсли;
	
	Если ПараметрыПисьма.ПортSMTP = Неопределено Тогда
		ПараметрыПисьма.ПортSMTP = Константы.ПортSMTP.Получить();
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Процедура ОтправитьСообщение(АдресЭлектроннойПочты, ТекстПисьмаОтветственному) Экспорт
	ПараметрыПисьма = РаботаСПочтовымиСообщениями.ПолучитьПараметрыПисьма();
	ПараметрыПисьма.Тело = ТекстПисьмаОтветственному;
	ПараметрыПисьма.Тема = "Результаты проверки кода";
	ПараметрыПисьма.АдресПолучателя = АдресЭлектроннойПочты;
	
	ПараметрыПисьма = ПодготовитьПараметрыПисьма(ПараметрыПисьма);
	
	ОписаниеОшибки = "";
	УспешноеВыполнение = РаботаСПочтовымиСообщениями.ОтправитьСообщение(ПараметрыПисьма, ОписаниеОшибки, Неопределено);

КонецПроцедуры
