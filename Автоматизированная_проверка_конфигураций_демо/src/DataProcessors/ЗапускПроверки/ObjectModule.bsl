#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ТаблицаОбъектовКонфигурации Экспорт; // содержит таблицу объектов конфигурации.
Перем СтруктураПроверки Экспорт;		   // содержит журнал проверки.
Перем СписокРасширений Экспорт;			   // содержит список проверяемых расширений.
Перем ИсходнаяВерсия;
Перем УровеньИнформация;
Перем УровеньОшибка;

#КонецОбласти

#Область ЗапускПроверки

// Проверка конфигурации состоит из двух этапов:
// 1. Сбор структуры и сведений о метаданных - СобратьМетаданныеКонфигурации().
// 2. Проверка на поиск ошибок в разрезе объектов и требований - ПроверитьКонфигурациюНаСоответствиеСтандартам().
//
Функция ЗапуститьПроверку(СписокТребований = Неопределено, СоставОбъектовДляПроверки = Неопределено,
	ПараметрыПроверки = Неопределено) Экспорт
	
	//+ ИнфоСофт Козлов И.М. 21.09.2018 АПК XML
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ЗаполнитьПараметрыПроверки();
	КонецЕсли;
	
	//НаборЗаписей = РегистрыСведений.НайденныеОшибки.СоздатьНаборЗаписей();
	//НаборЗаписей.Записать();
	
	Если Не Конфигурация.ИС_ИспользоватьКаталогФайловXML Тогда
		
		Если НЕ ЗначениеЗаполнено(Конфигурация) Тогда
			Возврат НСтр("ru='Не выбрана конфигурация.'");
		КонецЕсли;
		
		Если ПараметрыПроверки.ПроверитьСоединениеСБазой Тогда
			Если НЕ ДемоБазаСуществует(КаталогКонфигурацииКопия) Тогда
				СоздатьКопиюКонфигурации();
			КонецЕсли;
			
			Если НЕ ДемоБазаСуществует(КаталогКонфигурацииКопия) Тогда
				Возврат НСтр("ru='Проверяемая база не существует в указанном каталоге.'");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверки.ПроверитьПлатформуДляЗапускаПроверки Тогда
			Статус = ПроверитьПлатформуДляЗапускаПроверки();
			Если НЕ ПустаяСтрока(Статус) Тогда
				Возврат Статус;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверки.ПроверитьСоединениеСБазой Тогда
			Статус = ПроверитьСоединениеСБазой();
			Если НЕ ПустаяСтрока(Статус) Тогда
				Возврат Статус;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверки.ЗагрузитьКонфигурациюИзХранилища Тогда
			Статус = ЗагрузитьКонфигурациюИзХранилища(ПараметрыПроверки.НастройкиХранилища);
			Если НЕ ПустаяСтрока(Статус) Тогда
				Возврат Статус;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверки.ПроверитьВерсиюКонфигурации Тогда
			Статус = ПроверитьВерсиюКонфигурации();
			Если НЕ ПустаяСтрока(Статус) Тогда
				Возврат Статус;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверки.ОпределятьРежимЗапуска Тогда
			
			ЗаписатьДокументПроверкиВерсии(, Ложь);
			
			Результат = РаботаСВнешнимСоединением.КонфигурацияСоответствуетБД(Конфигурация, КаталогКонфигурацииКопия,
			Пользователь, Пароль);
			Если НЕ Результат Тогда
				// + ИнфоСофт, Фоминых В.С. 23.09.2018 Добавил процессорную директиву, т.к. серверная проверка через ФЗ
				#Если Клиент Тогда
					ТекстПредупреждения = НСтр("ru='Конфигурация базы данных не соответствует сохраненной конфигурации.
					|Рекомендуется обновить конфигурацию базы данных перед продолжением проверки.'");
					Предупреждение(ТекстПредупреждения);
				#КонецЕсли
				// - ИнфоСофт, Фоминых В.С. 23.09.2018
			КонецЕсли;
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьДокументПроверкиВерсии(, Ложь);
			РежимЗапуска = ОпределитьРежимЗапускаПриложения();
			Если НЕ ПустаяСтрока(РежимЗапуска) Тогда
				Возврат РежимЗапуска;
			КонецЕсли;
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	//- ИнфоСофт Козлов И.М. 21.09.2018
	
	Статус = СобратьМетаданныеКонфигурации(ПараметрыПроверки, СоставОбъектовДляПроверки);
	ОчиститьМассивВременныхФайлов();
	Если НЕ ПустаяСтрока(Статус) Тогда
		Возврат Статус;
	КонецЕсли;
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	Если ПараметрыПроверки.ПроверитьКонфигурацию Тогда
		Статус = ПроверитьКонфигурациюНаСоответствиеСтандартам(СписокТребований, СоставОбъектовДляПроверки);
		Если НЕ ПустаяСтрока(Статус) Тогда
			Возврат Статус;
		КонецЕсли;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОпределитьРежимЗапускаПриложения()
	
	Статус = "";
	
	Каталог = КаталогКонфигурацииКопия;
	Если ПустаяСтрока(Каталог) Тогда
		Каталог = Конфигурация.КаталогКонфигурации;
	КонецЕсли;
	
	Если НЕ ДемоБазаСуществует(Каталог) Тогда
		Статус = НСтр("ru='Проверяемая база не существует в указанном каталоге.'");
		Возврат Статус;
	КонецЕсли;
	
	ТолькоОбычныйРежим = Конфигурация.ТолькоОбычныйРежим;
	
	КлючЗапускаПриложения = РаботаСВнешнимСоединением.ПолучитьРежимЗапускаПриложения(Конфигурация,
		Каталог, Пользователь, Пароль);
	
	Если КлючЗапускаПриложения = "НеПолучен" Тогда
		Статус = НСтр("ru='Не удалось автоматически определить режим запуска конфигурации.
			|По умолчанию конфигурация будет проверяться в управляемом режиме.'");
		ТолькоОбычныйРежим = Ложь;
	ИначеЕсли ПустаяСтрока(КлючЗапускаПриложения) Тогда
		Статус = НСтр("ru='Не удалось подключиться к проверяемой базе. Возможно, не верно указаны логин и пароль.
			|Либо указанная версия платформы не соответствует конфигурации проверяемой базы.'");
		Возврат Статус;
	Иначе
		ТолькоОбычныйРежим = (КлючЗапускаПриложения = " /RunModeOrdinaryApplication");
	КонецЕсли;
	
	ОбъектКонфигурация = Конфигурация.ПолучитьОбъект();
	ОбъектКонфигурация.ТолькоОбычныйРежим = ТолькоОбычныйРежим;
	ОбъектКонфигурация.Записать();
	
	Возврат Статус;
	
КонецФункции

// Проверяет наличие платформы, установленной в конфигурации.
//
// + ИнфоСофт, Фоминых В.С. 23.09.2018
//Функция ПроверитьПлатформуДляЗапускаПроверки() Экспорт
Функция ПроверитьПлатформуДляЗапускаПроверки(ФормаРабочегоСтола = Неопределено) Экспорт
// - ИнфоСофт, Фоминых В.С. 23.09.2018

	// + ИнфоСофт, Фоминых В.С. 23.09.2018
	//Если НЕ ЗначениеЗаполнено(Конфигурация) Тогда
	Если НЕ ЗначениеЗаполнено(Конфигурация) И ФормаРабочегоСтола <> Неопределено Тогда
	// - ИнфоСофт, Фоминых В.С. 23.09.2018
		Конфигурация = ФормаРабочегоСтола.Конфигурация;
	КонецЕсли;
	
	СтрокаЗапускаПлатформы = Конфигурация.СтрокаЗапускаПлатформы;
	Статус = ПроверитьПлатформуДляПроверкиКонфигурации(СтрокаЗапускаПлатформы);
	Если ПустаяСтрока(Статус) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Не удалось запустить проверку конфигурации ""%2"" по причине:%1%3'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, Символы.ПС, Конфигурация.Наименование, Статус);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Проверяет COM-соединение с информационной базой.
//
Функция ПроверитьСоединениеСБазой()
	
	Текст = НСтр("ru='Выполняется проверка подключения к информационной базе через COM-соединение'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	Результат = РаботаСВнешнимСоединением.УстановитьCOMСоединениеСБазой(Конфигурация, КаталогКонфигурацииКопия,
		Пользователь, Пароль);
	
	Сообщение = Результат.Сообщение;
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		Если Результат.Успешно Тогда
			Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Сообщение, СтруктураПроверки.ЖурналПроверки);
			ЗаписатьДокументПроверкиВерсии(, Ложь);
		Иначе
			Текст = СтрШаблон(НСтр("ru='Проверка прекращена.
				|Подключение к информационной базе через COM-соединение завершилось с ошибкой:
				|%1'"), Сообщение);
			Возврат Текст;
		КонецЕсли;
	КонецЕсли;
	
	Текст = НСтр("ru='Подключение выполнено успешно'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	Возврат "";
	
КонецФункции

// Проверяет версию проверяемой конфигурации.
// Если уже есть проведенный документ проверки версии с версией выше, чем текущая в демобазе, то проверка прекращается.
//
Функция ПроверитьВерсиюКонфигурации()
	
	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроверкаВерсии.Версия.Код КАК Код
	|ИЗ
	|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
	|ГДЕ
	|	ПроверкаВерсии.Конфигурация = &Конфигурация
	|	И НЕ ПроверкаВерсии.ПометкаУдаления
	|	И ПроверкаВерсии.Проведен";
	
	ЗапросПоДокументам.УстановитьПараметр("Конфигурация", Конфигурация);
	
	ТаблицаВерсий = ЗапросПоДокументам.Выполнить().Выгрузить();
	Если ТаблицаВерсий.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МаксимальнаяВерсия = "0.0.0";
	Для Каждого СтрокаВерсии Из ТаблицаВерсий Цикл
		
		ВерсияКод = СтрокаВерсии.Код;
		Если ПустаяСтрока(ВерсияКод) Тогда
			Продолжить;
		КонецЕсли;
		
		ВерсияКод = СокрЛП(ВерсияКод);
		
		ВерсияКод = ПолучитьНомерВерсииБезСборки(ВерсияКод);
		Если РелизыПоПорядку(МаксимальнаяВерсия, ВерсияКод) Тогда
			МаксимальнаяВерсия = ВерсияКод;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МаксимальнаяВерсия = "0.0.0" Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = РаботаСВнешнимСоединением.ПолучитьВерсиюКонфигурации(Конфигурация, КаталогКонфигурацииКопия,
		Пользователь, Пароль);
	
	Если НЕ Результат.Успешно Тогда
		Возврат СтрШаблон(НСтр("ru='Проверка прекращена.%1%2'"), Символы.ПС, Результат.Сообщение);
	КонецЕсли;
	
	ТекущаяВерсияКонфигурации = Результат.Сообщение;
	Если ПустаяСтрока(ТекущаяВерсияКонфигурации) Тогда
		ТекущаяВерсияКонфигурации = "0.0.0";
	Иначе
		ТекущаяВерсияКонфигурации = ПолучитьНомерВерсииБезСборки(ТекущаяВерсияКонфигурации);
	КонецЕсли;
	
	// Сравниваем полученную версию конфигурацию демобазы с максимальной существующей версией.
	ТекстОшибки = "";
	Если РелизыПоПорядку(ТекущаяВерсияКонфигурации, МаксимальнаяВерсия) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Версия проверяемой конфигурации (%1) ниже, чем у проверенной ранее (%2).
			|Укажите демобазу с нужной версией конфигурации и перезапустите проверку.'"),
			ТекущаяВерсияКонфигурации,
			МаксимальнаяВерсия);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПроверитьКонфигурациюНаСоответствиеСтандартам(СписокТребований, СоставОбъектовДляПроверки)
	
	Если (СписокТребований = Неопределено) ИЛИ (СоставОбъектовДляПроверки = Неопределено) Тогда
		Возврат "";
	КонецЕсли;
	
	ОписаниеПроверки = ПолучитьОписаниеПроверки(Сценарий, СписокРасширений);
	
	#Если Клиент Тогда
	ТекстСостояние = НСтр("ru='Выполняется подготовка к проверке %1 на соответствие стандартам'");
	ТекстСостояние = СтрШаблон(ТекстСостояние, ОписаниеПроверки);
	Состояние(ТекстСостояние);
	#КонецЕсли
	
	Текст = СтрШаблон(НСтр("ru='Стартовала проверка %1'"), ОписаниеПроверки);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	
	СообщитьКоличествоОбъектовДляПроверки(СоставОбъектовДляПроверки);
	
	ЗаписатьДокументПроверкиВерсии();
	
	ДокументПроверки = ПроверкаВерсии.ПолучитьОбъект();
	
	Для Каждого Требование Из СписокТребований Цикл
		НовоеТребование = ДокументПроверки.СоставТребований.Добавить();
		НовоеТребование.Требование = Требование.Значение;
	КонецЦикла;
	
	СоставОбъектовДляПроверки = СопоставитьОбъектыДляПроверки(СоставОбъектовДляПроверки);
	
	Для Каждого ОбъектДляПроверки Из СоставОбъектовДляПроверки Цикл
		НовыйОбъектДляПроверки = ДокументПроверки.СоставОбъектов.Добавить();
		НовыйОбъектДляПроверки.Объект = ОбъектДляПроверки;
	КонецЦикла;
	
	ЗаполнитьКоличествоОбъектовДляПроверки(СоставОбъектовДляПроверки);
	ЗаполнитьЗначенияСвойств(ДокументПроверки, СтруктураПроверки, "ПроверяемыеОбъекты");
	ДокументПроверки.Записать(РежимЗаписиДокумента.Запись);
	
	ТекстОшибки = "";
	Попытка
		Проверка.ОбработкаПроведенияДокументаПроверки(ДокументПроверки);
		ДокументПроверки.Проведен = Истина;
		ДокументПроверки.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстОшибки = НСтр("ru='При проверке %1 по требованиям произошла ошибка:%2%3'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеПроверки, Символы.ПС, ОписаниеОшибки);
	КонецПопытки;
	
	// При проведении журнал проверки мог измениться, получаем измененный текст.
	ЗаполнитьЗначенияСвойств(СтруктураПроверки, ДокументПроверки, "ЖурналПроверки");
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	СтруктураПроверки.ОбнаруженоОшибок = ПолучитьОбщееКоличествоОшибокПослеПроверки(Версия);
	
	Текст = СтрШаблон(НСтр("ru='Выполнена проверка %1'"), ОписаниеПроверки);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область СборСведений

Функция ЗапуститьПлатформеннуюПроверку(Конфигурация, СтруктураПроверки, Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	ИмяРасширения = ?(ЗначениеЗаполнено(Расширение), Расширение.Наименование, "");
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ФайлРезультатаПлатформеннойПроверки", "");
	
	Текст = НСтр("ru='Запуск платформенной проверки %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	КаталогКонфигурацииДляПлатформеннойПроверки = ПолучитьКаталогВременныхФайлов();
	ТекстОшибки = КопироватьБазу(КаталогКонфигурацииКопия, КаталогКонфигурацииДляПлатформеннойПроверки);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ФайлРезультатаПлатформеннойПроверки = ПолучитьИмяВременногоФайла();
	ДоступККонфигуратору.ЗапуститьПлатформеннуюПроверку(Конфигурация, КаталогКонфигурацииДляПлатформеннойПроверки,
		Пользователь, Пароль, ФайлРезультатаПлатформеннойПроверки, ИмяРасширения);
	
	СтруктураПроверки.ВременныеФайлы.Добавить(КаталогКонфигурацииДляПлатформеннойПроверки);
	СтруктураПроверки.ВременныеФайлы.Добавить(ФайлРезультатаПлатформеннойПроверки);
	
	Результат.Вставить("ФайлРезультатаПлатформеннойПроверки", ФайлРезультатаПлатформеннойПроверки);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьРезультатыПлатформеннойПроверки(Конфигурация, СтруктураПроверки, ФайлРезультатаПлатформеннойПроверки,
	СборщикДанных, Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	Операция = НСтр("ru='Платформенная проверка %1'");
	Операция = СтрШаблон(Операция, ОписаниеКонфигурацииИлиРасширения);
	Статус = ОжиданиеЗавершенияОперации(ФайлРезультатаПлатформеннойПроверки, Операция);
	Если ПустаяСтрока(Статус) Тогда
		// Если платформенная проверка завершилась успешно, то пишем ошибки в РС.
		СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
		Статус = СборщикДанных.ЗаписатьОшибкиПлатформеннойПроверкиКонфигурации(ФайлРезультатаПлатформеннойПроверки);
	КонецЕсли;
	
	// Если не удалось записать ошибки платформенной проверки, сообщаем об ошибке.
	Если НЕ ПустаяСтрока(Статус) Тогда
		Зафиксировать(Конфигурация.Наименование, УровеньОшибка, Статус, СтруктураПроверки.ЖурналПроверки);
	КонецЕсли;
	
	Текст = НСтр("ru='Платформенная проверка %1 завершена'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	// Устанавливаем флаг, если в статусе нет ошибки.
	Если ПустаяСтрока(Статус) Тогда
		ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеПоПроверкеКонфигурации",, СборщикДанных.Расширение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьПрименениеРасширенияКОсновнойКонфигурации(Конфигурация, СтруктураПроверки, СборщикДанных, Расширение)
	
	ИмяРасширения = Расширение.Наименование;
	
	Текст = НСтр("ru='Запуск проверки применения расширения %1'");
	Текст = СтрШаблон(Текст, ИмяРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	ИмяРасширения = Расширение.Наименование;
	РезультатПроверки = ДоступККонфигуратору.ВыполнитьПроверкуПримененияРасширения(Конфигурация, КаталогКонфигурацииКопия,
		Конфигурация.Пользователь, Конфигурация.Пароль, ИмяРасширения);
	
	СборщикДанных.Расширение = Расширение;
	Статус = СборщикДанных.ЗаписатьОшибкиПроверкиПримененияРасширения(РезультатПроверки);
	Если НЕ ПустаяСтрока(Статус) Тогда
		Зафиксировать(Конфигурация.Наименование, УровеньОшибка, Статус, СтруктураПроверки.ЖурналПроверки);
	КонецЕсли;
	
	Текст = НСтр("ru='Проверка применения расширения %1 завершена'");
	Текст = СтрШаблон(Текст, ИмяРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	// Устанавливаем флаг, если в статусе нет ошибки.
	Если ПустаяСтрока(Статус) Тогда
		ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеПоПроверкеПримененияРасширения",, Расширение);
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ЗапуститьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, СтруктураПроверки, Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	ИмяРасширения = ?(ЗначениеЗаполнено(Расширение), Расширение.Наименование, "");
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("КаталогВыгрузкиФайловXML", "");
	Результат.Вставить("ФайлЛогаВыгрузкиФайловXML", "");
	
	Текст = НСтр("ru='Запуск выгрузки %1 в файлы XML'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	
	КаталогКонфигурацииДляВыгрузкиВФайлыXML = ПолучитьКаталогВременныхФайлов();
	КаталогВыгрузкиФайловXML = ПолучитьКаталогВременныхФайлов();
	
	ТекстОшибки = КопироватьБазу(КаталогКонфигурацииКопия, КаталогКонфигурацииДляВыгрузкиВФайлыXML);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ФайлЛогаВыгрузкиФайловXML = ПолучитьИмяВременногоФайла("txt");
	
	ДоступККонфигуратору.ЗапуститьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, КаталогКонфигурацииДляВыгрузкиВФайлыXML,
		Пользователь, Пароль, КаталогВыгрузкиФайловXML, ФайлЛогаВыгрузкиФайловXML, ИмяРасширения);
	
	СтруктураПроверки.ВременныеФайлы.Добавить(КаталогКонфигурацииДляВыгрузкиВФайлыXML);
	СтруктураПроверки.ВременныеФайлы.Добавить(КаталогВыгрузкиФайловXML);
	СтруктураПроверки.ВременныеФайлы.Добавить(ФайлЛогаВыгрузкиФайловXML);
	
	Результат.Вставить("КаталогВыгрузкиФайловXML", КаталогВыгрузкиФайловXML);
	Результат.Вставить("ФайлЛогаВыгрузкиФайловXML", ФайлЛогаВыгрузкиФайловXML);
	Возврат Результат;
	
КонецФункции

Функция ОжидатьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML,
	ФайлЛогаВыгрузкиФайловXML, Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	Операция = НСтр("ru='Выгрузка %1 в файлы XML'");
	Операция = СтрШаблон(Операция, ОписаниеКонфигурацииИлиРасширения);
	Статус = ОжиданиеЗавершенияОперации(ФайлЛогаВыгрузкиФайловXML, Операция);
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	СтатусВыгрузки = ФайлПолучитьТекст(ФайлЛогаВыгрузкиФайловXML);
	Если НЕ ПустаяСтрока(СтатусВыгрузки) Тогда
		
		МассивИсключений = ПолучитьМассивИсключенийОшибокВыгрузки();
		ЭтоИсключение = Ложь;
		Для Каждого Элемент Из МассивИсключений Цикл
			Если СтрНайти(ВРег(СтатусВыгрузки), ВРег(Элемент)) > 0 Тогда
				ЭтоИсключение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЭтоИсключение Тогда
			ТекстОшибки = НСтр("ru='Выгрузка %1 в файлы XML завершилась с ошибкой:%2%3'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеКонфигурацииИлиРасширения, Символы.ПС, СтатусВыгрузки);
			Результат.Вставить("ТекстОшибки", ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Текст = НСтр("ru='Выгрузка %1 в файлы XML завершена'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	Если НЕ ФайлСуществует(КаталогВыгрузкиФайловXML) Тогда
		ТекстОшибки = НСтр("ru='Не найден каталог выгрузки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеКонфигурацииИлиРасширения);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОчиститьРанееСобранныеСведения(Конфигурация, СтруктураПроверки, Расширение = Неопределено)
	
	Расширение = ПолучитьСсылкуРасширения(Расширение);
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	СобраныДанныеРасширения = ВерсияПолучитьФлагСбораДанных(Версия, "СобраныДанные", Расширение);
	Если Не СобраныДанныеРасширения Тогда
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Начало очистки сведений о метаданных %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	ОчисткаДанныхСобранныхРанееПоСобираемымОбъектам(Расширение);
	
	Текст = НСтр("ru='Сведения о метаданных %1 очищены'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьСтруктуруКонфигурации(Конфигурация, СтруктураПроверки, СоставОбъектовДляПроверки, КаталогВыгрузкиФайловXML,
	СборщикДанных, Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	Текст = НСтр("ru='Начало сбора сведений о структуре метаданных %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	Статус = ЗаполнитьСтруктуруКонфигурации(СборщикДанных, СоставОбъектовДляПроверки, КаталогВыгрузкиФайловXML);
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны и записаны сведения о структуре метаданных %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьВерсиюКонфигурации(Конфигурация, СтруктураПроверки, СоставОбъектовДляПроверки, КаталогВыгрузкиФайловXML,
	СборщикДанных, Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	Текст = НСтр("ru='Начало сбора сведений о версии %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	ДанныеКонфигурации = РазборФайловXML.ПолучитьДанныеСтруктурыКонфигурации(КаталогВыгрузкиФайловXML, Истина);
	Если ДанныеКонфигурации = Неопределено Тогда
		Результат.Вставить("ТекстОшибки", НСтр("ru='Не удалось собрать данные о версии конфигурации
			|Проверка прекращена'"));
		Возврат Результат;
	КонецЕсли;
	
	СборщикДанных.УстановитьВерсиюКонфигурации(ДанныеКонфигурации.Версия);
	
	// Установим полученную версию.
	ИсходнаяВерсия = Версия;
	Версия = СборщикДанных.Версия;
	
	Если ЗначениеЗаполнено(ПроверкаВерсии) Тогда
		ДокументПроверки = ПроверкаВерсии.ПолучитьОбъект();
		ДокументПроверки.Версия = Версия;
		ДокументПроверки.Эталон = ИсходнаяВерсия;
		ДокументПроверки.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны и записаны сведения о версии %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	Возврат Результат;
	
КонецФункции

Функция СобратьСведенияОРолях(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных,
	Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	Текст = НСтр("ru='Начало сбора сведений о ролях %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	// Получаем данные о ролях.
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	СборщикДанных.ЗаполнитьСведенияОРолях(КаталогВыгрузкиФайловXML);
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Текст = НСтр("ru='Собраны и записаны сведения о ролях %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОРолях",, СборщикДанных.Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьСведенияОМетаданных(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных, Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	// Получаем сведения о метаданных.
	Текст = НСтр("ru='Начало сбора сведений о метаданных %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	Статус = СборщикДанных.ЗаполнитьСведенияОМетаданных(КаталогВыгрузкиФайловXML);
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны сведения о метаданных %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	Текст = НСтр("ru='Начало записи сведений о метаданных %1 в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.ЗаписатьДанныеВИБ();
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Текст = НСтр("ru='Сведения о метаданных %1 записаны в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОМетаданных",, СборщикДанных.Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьСведенияОМодулях(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных,
	Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	// Получаем данные о модулях конфигурации
	Текст = НСтр("ru='Начало сбора сведений о модулях %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	Статус = СборщикДанных.ЗаполнитьСведенияОМодулях(КаталогВыгрузкиФайловXML);
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны сведения о модулях %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	Текст = НСтр("ru='Начало записи сведений о модулях %1 в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.ЗаписатьДанныеВИБ();
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Текст = НСтр("ru='Сведения о модулях %1 записаны в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОМодулях",, СборщикДанных.Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьСведенияОСправке(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных,
	Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	// Получаем данные о справке
	Текст = НСтр("ru='Начало сбора сведений о справке %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	Статус = СборщикДанных.ЗаполнитьСведенияОСправке(КаталогВыгрузкиФайловXML);
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны сведения о справке %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	Текст = НСтр("ru='Начало записи сведений о справке %1 в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.ЗаписатьДанныеВИБ();
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Текст = НСтр("ru='Сведения о справке %1 записаны в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОСправке",, СборщикДанных.Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьСведенияОФормахИзXML(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных,
	Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	// Получаем данные по формам из файлов XML.
	Текст = НСтр("ru='Начало сбора сведений о формах %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	Статус = СборщикДанных.ЗаполнитьСведенияОФормахИзXML(КаталогВыгрузкиФайловXML);
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны и записаны сведения о формах %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОФормах",, СборщикДанных.Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьСведенияОМакетах(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных,
	Расширение = Неопределено)
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	// Получаем данные по макетам.
	Текст = НСтр("ru='Начало сбора сведений о макетах %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	Статус = СборщикДанных.ЗаполнитьСведенияОМакетах(КаталогВыгрузкиФайловXML);
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны сведения о макетах %1'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	Текст = НСтр("ru='Начало записи сведений о макетах %1 в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.ЗаписатьДанныеВИБ();
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Текст = НСтр("ru='Сведения о макетах %1 записаны в информационную базу'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОМакетах",, СборщикДанных.Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьСведенияОМодуляхОбычныхФорм(Конфигурация, СтруктураПроверки, СборщикДанных,
	Расширение = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	// Получаем данные о модулях обычных форм.
	Текст = НСтр("ru='Начало сбора сведений о модулях обычных форм конфигурации'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.Расширение = ПолучитьСсылкуРасширения(Расширение);
	Статус = СборщикДанных.ЗаполнитьСведенияОМодуляхОбычныхФорм();
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Если НЕ ПустаяСтрока(Статус) Тогда
		Результат.Вставить("ТекстОшибки", Статус);
		Возврат Результат;
	КонецЕсли;
	
	Текст = НСтр("ru='Собраны сведения о модулях обычных форм конфигурации'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	Текст = НСтр("ru='Начало записи сведений о модулях обычных форм в информационную базу'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	СборщикДанных.ЗаписатьДанныеВИБ();
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	Текст = НСтр("ru='Сведения о модулях обычных форм записаны в информационную базу'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОМодулях",, СборщикДанных.Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьФлагСобранныеДанные(Конфигурация, СтруктураПроверки, Знач Расширение = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	ОписаниеКонфигурацииИлиРасширения = ПолучитьОписаниеКонфигурацииИлиРасширения(Расширение);
	
	Текст = НСтр("ru='Сбор сведений %1 завершен'");
	Текст = СтрШаблон(Текст, ОписаниеКонфигурацииИлиРасширения);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии();
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанные",, Расширение);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьМетаданныеКонфигурации(ПараметрыПроверки, СоставОбъектовДляПроверки)
	
#Область ИнициализацияПеременных
	
	УстановитьФлагСобраныДанные = Ложь;
	ЭтапыПроверкиПоТребованиям = ПараметрыПроверки.ЭтапыПроверкиПоТребованиям;
	
	ТолькоЗаполнениеВерсииИзКонфигурации = (Сценарий = 1) И НЕ ЗначениеЗаполнено(Версия);
	
	// Если выбраны требования с проверкой модулей расширения,
	// то необходимо собирать структуру основной конфигурации и сведения о модулях ее объектов,
	// вне зависимости от того, выбраны они для проверки или нет.
	АнализМодулей = ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОМодулях;
	
	ВыгружатьКонфигурациюВФайлыXML = ПараметрыПроверки.ПостроитьСтруктуру
	 ИЛИ ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОРолях
	 ИЛИ ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОФормах
	 ИЛИ АнализМодулей
	 ИЛИ ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОСправке
	 ИЛИ ТолькоЗаполнениеВерсииИзКонфигурации;
	
	СборщикДанных = Обработки.СборДанных.Создать();
	СборщикДанных.Версия = Версия;
	СборщикДанных.Конфигурация = Конфигурация;
	СборщикДанных.КаталогКонфигурации = КаталогКонфигурацииКопия;
	СборщикДанных.Пользователь = Пользователь;
	СборщикДанных.Пароль = Пароль;
	СборщикДанных.СтруктураПроверки = СтруктураПроверки;
	
	СборщикДанных.ИнициализироватьСборДанных();
	
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	
	АнализКонфигурации = (Сценарий = 0) ИЛИ (Сценарий = 2);
	АнализРасширений = (Сценарий > 0);
	// + ИнфоСофт, Фоминых В.С. 23.09.2018
	Если СписокРасширений = Неопределено Тогда
		СписокРасширений = Новый СписокЗначений;
	КонецЕсли;
	// - ИнфоСофт, Фоминых В.С. 23.09.2018
	СписокРасширенийКопия = СписокРасширений.Скопировать();
	Если АнализКонфигурации Тогда
		
		ПустаяСсылкаРасширение = Справочники.Расширения.ПустаяСсылка();
		ЭлементСпискаРасширения = СписокРасширенийКопия.НайтиПоЗначению(ПустаяСсылкаРасширение);
		Если ЭлементСпискаРасширения <> Неопределено Тогда
			СписокРасширенийКопия.Удалить(ЭлементСпискаРасширения);
		КонецЕсли;
		
	КонецЕсли;
	
	Расширения = СписокРасширенийКопия.ВыгрузитьЗначения();
	
#КонецОбласти

#Область ЗапускПлатформеннойПроверки
//+ ИнфоСофт Козлов И.М. 01.10.2018 Основное средства
Если НЕ ВыгружатьКонфигурациюВФайлыXML Тогда
//- ИнфоСофт Козлов И.М. 01.10.2018
	Если ЭтапыПроверкиПоТребованиям.ВыполнитьПлатформеннуюПроверкуКонфигурации Тогда
		
		Если АнализКонфигурации Тогда
			
			Результат = ЗапуститьПлатформеннуюПроверку(Конфигурация, СтруктураПроверки);
			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
				Возврат Результат.ТекстОшибки;
			КонецЕсли;
			
			ФайлРезультатаПлатформеннойПроверки = Результат.ФайлРезультатаПлатформеннойПроверки;
			
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			МассивФайловРезультатовПлатформеннойПроверкиРасширений = Новый Массив;
			Для Каждого Расширение Из Расширения Цикл
				
				Результат = ЗапуститьПлатформеннуюПроверку(Конфигурация, СтруктураПроверки, Расширение);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				
				МассивФайловРезультатовПлатформеннойПроверкиРасширений.Добавить(Результат.ФайлРезультатаПлатформеннойПроверки);
				
			КонецЦикла;
			
		КонецЕсли;
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
//+ ИнфоСофт Козлов И.М. 01.10.2018 Основное средства
КонецЕсли;
//- ИнфоСофт Козлов И.М. 01.10.2018
	
#КонецОбласти

#Область ЗапускВыгрузкиКонфигурацииВФайлыXML
	
	КаталогВыгрузкиФайловXML = "";
	
	Если ВыгружатьКонфигурациюВФайлыXML Тогда
		
		Если АнализКонфигурации ИЛИ АнализМодулей ИЛИ ТолькоЗаполнениеВерсииИзКонфигурации Тогда
			
			//+ ИнфоСофт Козлов И.М. 21.09.2018 АПК XML
			
			//Результат = ЗапуститьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, СтруктураПроверки);
			//Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
			//	Возврат Результат.ТекстОшибки;
			//КонецЕсли;
			//КаталогВыгрузкиФайловXML = Результат.КаталогВыгрузкиФайловXML;
			//ФайлЛогаВыгрузкиФайловXML = Результат.ФайлЛогаВыгрузкиФайловXML;
			
			Если Конфигурация.ИС_ИспользоватьКаталогФайловXML Тогда
				КаталогВыгрузкиФайловXML = Конфигурация.ИС_КаталогФайловXML;
				ФайлЛогаВыгрузкиФайловXML = ПолучитьИмяВременногоФайла("txt");
			Иначе
				Результат = ЗапуститьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, СтруктураПроверки);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				КаталогВыгрузкиФайловXML = Результат.КаталогВыгрузкиФайловXML;
				ФайлЛогаВыгрузкиФайловXML = Результат.ФайлЛогаВыгрузкиФайловXML;
			КонецЕсли;
			
			//- ИнфоСофт Козлов И.М. 21.09.2018
			
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			МассивКаталоговВыгрузкиФайловXMLРасширения = Новый Массив;
			МассивФайловЛоговВыгрузкиФайловXMLРасширения = Новый Массив;
			Для Каждого Расширение Из Расширения Цикл
				
				ИмяРасширения = Расширение.Наименование;
				Результат = ЗапуститьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, СтруктураПроверки, Расширение);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				МассивКаталоговВыгрузкиФайловXMLРасширения.Добавить(Результат.КаталогВыгрузкиФайловXML);
				МассивФайловЛоговВыгрузкиФайловXMLРасширения.Добавить(Результат.ФайлЛогаВыгрузкиФайловXML);
				
			КонецЦикла;
			
		КонецЕсли;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область ОчисткаРанееСобранныхСведений
	
	// Очищаем данные, только если они были собраны при предыдущей проверке.
	Если ПараметрыПроверки.ОчищатьСобранныеДанные Тогда
		
		Если АнализКонфигурации ИЛИ АнализМодулей Тогда
			ОчиститьРанееСобранныеСведения(Конфигурация, СтруктураПроверки);
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				ОчиститьРанееСобранныеСведения(Конфигурация, СтруктураПроверки, Расширение);
			КонецЦикла;
			
		КонецЕсли;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;

#КонецОбласти

#Область ОжиданиеВыгрузкиКонфигурацииВФайлыXML
	
	Если ВыгружатьКонфигурациюВФайлыXML Тогда
		
		Если АнализКонфигурации ИЛИ АнализМодулей ИЛИ ТолькоЗаполнениеВерсииИзКонфигурации Тогда
			
			Если НЕ Конфигурация.ИС_ИспользоватьКаталогФайловXML Тогда
				Результат = ОжидатьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML,
					ФайлЛогаВыгрузкиФайловXML);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				
				ИндексСтроки = Расширения.Найти(Расширение);
				ФайлЛогаВыгрузкиФайловXMLРасширения = МассивФайловЛоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
				КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
				Результат = ОжидатьВыгрузкуКонфигурацииВФайлыXML(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXMLРасширения,
					ФайлЛогаВыгрузкиФайловXMLРасширения, Расширение);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область ЗаписьСтруктурыКонфигурации
	
	Если ПараметрыПроверки.ПостроитьСтруктуру Тогда
		
		Если ТолькоЗаполнениеВерсииИзКонфигурации Тогда
			
			Результат = ЗаписатьВерсиюКонфигурации(Конфигурация, СтруктураПроверки, СоставОбъектовДляПроверки,
				КаталогВыгрузкиФайловXML, СборщикДанных);
			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
				Возврат Результат.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		// Строим структуру конфигурации, даже если выбрана проверка расширений, но по модулям,
		// т.к. для некоторых проверок модулей необходимо знать структуру основной конфигурации.
		Если АнализКонфигурации ИЛИ АнализМодулей Тогда
			
			Результат = ЗаписатьСтруктуруКонфигурации(Конфигурация, СтруктураПроверки, СоставОбъектовДляПроверки,
				КаталогВыгрузкиФайловXML, СборщикДанных);
			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
				Возврат Результат.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				
				ИндексСтроки = Расширения.Найти(Расширение);
				КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
				Результат = ЗаписатьСтруктуруКонфигурации(Конфигурация, СтруктураПроверки, СоставОбъектовДляПроверки,
					КаталогВыгрузкиФайловXMLРасширения, СборщикДанных, Расширение);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область СборСведенийОРолях

	//+ ИнфоСофт Козлов И.М. 01.10.2018 Основное средства
	ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОРолях = Ложь;	
	//- ИнфоСофт Козлов И.М. 01.10.2018
	
	Если ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОРолях Тогда
		
		Если АнализКонфигурации Тогда
			СобратьСведенияОРолях(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных);
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				
				ИндексСтроки = Расширения.Найти(Расширение);
				КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
				
				СобратьСведенияОРолях(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXMLРасширения, СборщикДанных,
					Расширение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьФлагСобраныДанные = Истина;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область СборСведенийОМетаданных
	
	Если ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОМетаданных Тогда
		
		Если АнализКонфигурации Тогда
			
			Результат = СобратьСведенияОМетаданных(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных);
			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
				Возврат Результат.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				
				ИндексСтроки = Расширения.Найти(Расширение);
				КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
				
				Результат = СобратьСведенияОМетаданных(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXMLРасширения, СборщикДанных,
					Расширение);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьФлагСобраныДанные = Истина;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область СборСведенийОМодулях
	
	Если АнализМодулей Тогда
		
		// Получаем сведения о модулях, даже если выбрана проверка только расширений,
		// т.к. для некоторых проверок модулей объектов расширения необходимо знать содержимое модулей основной конфигурации.
		Результат = СобратьСведенияОМодулях(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных);
		Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
			Возврат Результат.ТекстОшибки;
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				
				ИндексСтроки = Расширения.Найти(Расширение);
				КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
				
				Результат = СобратьСведенияОМодулях(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXMLРасширения,
					СборщикДанных, Расширение);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьФлагСобраныДанные = Истина;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область СборСведенийОСправке

	//+ ИнфоСофт Козлов И.М. 26.09.2018 АПК XML
	//Если ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОСправке Тогда
	//	
	//	Если АнализКонфигурации Тогда
	//		
	//		Результат = СобратьСведенияОСправке(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных);
	//		Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
	//			Возврат Результат.ТекстОшибки;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Если АнализРасширений Тогда
	//		
	//		Для Каждого Расширение Из Расширения Цикл
	//			
	//			ИндексСтроки = Расширения.Найти(Расширение);
	//			КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
	//			
	//			Результат = СобратьСведенияОСправке(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXMLРасширения,
	//				СборщикДанных, Расширение);
	//			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
	//				Возврат Результат.ТекстОшибки;
	//			КонецЕсли;
	//		
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//	УстановитьФлагСобраныДанные = Истина;
	//	
	//	#Если Клиент Тогда
	//	ОбработкаПрерыванияПользователя();
	//	#КонецЕсли
	//	
	//КонецЕсли;  
	//- ИнфоСофт Козлов И.М. 26.09.2018
	
#КонецОбласти

#Область ЗаписьРезультатовПлатформеннойПроверки
	
	Если ЭтапыПроверкиПоТребованиям.ВыполнитьПлатформеннуюПроверкуКонфигурации Тогда
		
		Если АнализКонфигурации Тогда
			
			Результат = ЗаписатьРезультатыПлатформеннойПроверки(Конфигурация, СтруктураПроверки,
				ФайлРезультатаПлатформеннойПроверки, СборщикДанных);
			
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				
				ИндексСтроки = Расширения.Найти(Расширение);
				ФайлРезультатаПлатформеннойПроверкиРасширения = МассивФайловРезультатовПлатформеннойПроверкиРасширений[ИндексСтроки];
				
				Результат = ЗаписатьРезультатыПлатформеннойПроверки(Конфигурация, СтруктураПроверки,
					ФайлРезультатаПлатформеннойПроверкиРасширения, СборщикДанных, Расширение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьФлагСобраныДанные = Истина;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область ПроверкаПримененияРасширений
	
	Если АнализРасширений И ЭтапыПроверкиПоТребованиям.ВыполнитьПроверкуПримененияРасширения Тогда
		
		Для Каждого Расширение Из Расширения Цикл
			ПроверитьПрименениеРасширенияКОсновнойКонфигурации(Конфигурация, СтруктураПроверки, СборщикДанных, Расширение);
		КонецЦикла;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область СборСведенийОФормахИзXML
	
	Если ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОФормах Тогда
		
		Если АнализКонфигурации Тогда
			Результат = СобратьСведенияОФормахИзXML(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных);
			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
				Возврат Результат.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Если АнализРасширений Тогда
			
			Для Каждого Расширение Из Расширения Цикл
				
				ИндексСтроки = Расширения.Найти(Расширение);
				КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
				
				Результат = СобратьСведенияОФормахИзXML(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXMLРасширения, СборщикДанных,
					Расширение);
				Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Возврат Результат.ТекстОшибки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьФлагСобраныДанные = Истина;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЕсли;
	
#КонецОбласти

#Область СборСведенийОМакетах

	//+ ИнфоСофт Козлов И.М. 02.10.2018 Основное средства
	//Если ЭтапыПроверкиПоТребованиям.ЗаполнитьСведенияОМакетах Тогда
	//	
	//	Если АнализКонфигурации Тогда
	//		Результат = СобратьСведенияОМакетах(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXML, СборщикДанных);
	//		Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
	//			Возврат Результат.ТекстОшибки;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если АнализРасширений Тогда
	//		
	//		Для Каждого Расширение Из Расширения Цикл
	//			
	//			ИндексСтроки = Расширения.Найти(Расширение);
	//			КаталогВыгрузкиФайловXMLРасширения = МассивКаталоговВыгрузкиФайловXMLРасширения[ИндексСтроки];
	//			
	//			Результат = СобратьСведенияОМакетах(Конфигурация, СтруктураПроверки, КаталогВыгрузкиФайловXMLРасширения, СборщикДанных,
	//				Расширение);
	//			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
	//				Возврат Результат.ТекстОшибки;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//	УстановитьФлагСобраныДанные = Истина;
	//	
	//	#Если Клиент Тогда
	//	ОбработкаПрерыванияПользователя();
	//	#КонецЕсли
	//	
	//КонецЕсли;
	//- ИнфоСофт Козлов И.М. 02.10.2018
	
#КонецОбласти

#Область СборСведенийОМодуляхОбычныхФорм
	
	// Данный этап вынесен из общего сбора модулей, т.к. в это время происходит платформенная проверка,
	// а для отдельной выгрузки модулей требуется запуск конфигуратора.
	//+ ИнфоСофт Козлов И.М. 01.10.2018 Основное средства
	//Если АнализМодулей Тогда
	//	
	//	// Получаем сведения о модулях, даже если выбрана проверка только расширений,
	//	// т.к. для некоторых проверок модулей объектов расширения необходимо знать содержимое модулей основной конфигурации.
	//	Результат = СобратьСведенияОМодуляхОбычныхФорм(Конфигурация, СтруктураПроверки, СборщикДанных);
	//	Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
	//		Возврат Результат.ТекстОшибки;
	//	КонецЕсли;
	//	
	//	Если АнализРасширений Тогда
	//		
	//		Для Каждого Расширение Из Расширения Цикл
	//			
	//			Результат = СобратьСведенияОМодуляхОбычныхФорм(Конфигурация, СтруктураПроверки, СборщикДанных, Расширение);
	//			Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
	//				Возврат Результат.ТекстОшибки;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//	УстановитьФлагСобраныДанные = Истина;
	//	
	//	#Если Клиент Тогда
	//	ОбработкаПрерыванияПользователя();
	//	#КонецЕсли
	//	
	//КонецЕсли;
	//- ИнфоСофт Козлов И.М. 01.10.2018
	
#КонецОбласти
	
	// Устанавливаем флаги общего сбора данных, только если что-то действительно было собрано.
	Если УстановитьФлагСобраныДанные Тогда
		
		Если АнализКонфигурации ИЛИ АнализМодулей Тогда
			УстановитьФлагСобранныеДанные(Конфигурация, СтруктураПроверки);
		КонецЕсли;
			
		Если АнализРасширений Тогда
			Для Каждого Расширение Из Расширения Цикл
				УстановитьФлагСобранныеДанные(Конфигурация, СтруктураПроверки, Расширение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
КонецФункции

Функция ЗагрузитьКонфигурациюИзХранилища(НастройкиХранилища)
	
	Текст = НСтр("ru='Начало получения номера версии хранилища конфигурации'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Конфигурация", Конфигурация);
	ПараметрыЗапуска.Вставить("СтрокаЗапускаПлатформы", Конфигурация.СтрокаЗапускаПлатформы);
	ПараметрыЗапуска.Вставить("КаталогКонфигурации", КаталогКонфигурацииКопия);
	ПараметрыЗапуска.Вставить("Пользователь", Пользователь);
	ПараметрыЗапуска.Вставить("Пароль", Пароль);
	ПараметрыЗапуска.Вставить("КаталогХранилища", НастройкиХранилища.КаталогХранилища);
	ПараметрыЗапуска.Вставить("ПользовательХранилища", НастройкиХранилища.ПользовательХранилища);
	ПараметрыЗапуска.Вставить("ПарольХранилища", НастройкиХранилища.ПарольХранилища);
	ПараметрыЗапуска.Вставить("ПерезапуститьНаНеобходимойПлатформе", Истина);
	ПараметрыЗапуска.Вставить("ПерезаписатьСтрокуЗапускаПлатформыКонфигурации", Ложь);
	
	Результат = ДоступККонфигуратору.ПолучитьВерсиюХранилища(ПараметрыЗапуска);
	Если Результат.Успешно Тогда
		Текст = НСтр("ru='Номер версии хранилища конфигурации получен успешно: %1'");
		Текст = СтрШаблон(Текст, Результат.ВерсияХранилища);
	Иначе
		Текст = Результат.ТекстОшибки;
	КонецЕсли;
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	
	Текст = НСтр("ru='Начало обновления конфигурации из хранилища'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	ПараметрыЗапуска.Вставить("ПерезапуститьНаНеобходимойПлатформе", Истина);
	ПараметрыЗапуска.Вставить("ПерезаписатьСтрокуЗапускаПлатформыКонфигурации", Ложь);
	
	Результат = ДоступККонфигуратору.ЗагрузитьКонфигурациюИзХранилищаИОбновить(ПараметрыЗапуска);
	Если НЕ Результат.Успешно Тогда
		ТекстОшибки = НСтр("ru='Обновление конфигурации из хранилища завершилось с ошибкой:%1%2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Символы.ПС, Результат.ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Текст = НСтр("ru='Обновление конфигурации из хранилища завершено'");
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	
	Текст = НСтр("ru='Начало выполнения обработчиков обновления'");
	
	ТекущаяВерсия = Версия.ПолныйНомер;
	Если НЕ ПустаяСтрока(ТекущаяВерсия) Тогда
		Текст = Текст + " " + СтрШаблон(НСтр("ru='с версии %1'"), ТекущаяВерсия);
	КонецЕсли;
	
	Результат = РаботаСВнешнимСоединением.ПолучитьВерсиюКонфигурации(Конфигурация, КаталогКонфигурацииКопия,
		Пользователь, Пароль);
	Если Результат.Успешно Тогда
		Текст = Текст + " " + СтрШаблон(НСтр("ru='на версию %1'"), Результат.Сообщение);
	КонецЕсли;
	
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	ЗаписатьДокументПроверкиВерсии(, Ложь);
	
	Статус = ДоступК1СПредприятию.ВыполнитьОбработчикОбновления(Конфигурация, КаталогКонфигурацииКопия,
		Пользователь, Пароль);
	
	Текст = ?(ПустаяСтрока(Статус), НСтр("ru='Выполнение обработчиков обновления успешно завершено'"), Статус);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	
	Возврат "";
	
КонецФункции

Функция ЗаполнитьСтруктуруКонфигурации(СборщикДанных, СоставОбъектовДляПроверки, КаталогВыгрузкиФайловXML)
	
	Результат = СборщикДанных.ЗаполнитьСтруктуруКонфигурации(КаталогВыгрузкиФайловXML);
	СтруктураПроверки = СборщикДанных.СтруктураПроверки;
	Если НЕ Результат Тогда
		Текст = НСтр("ru='Не удалось собрать данные о структуре конфигурации
			|Проверка конфигурации прекращена'");
		Возврат Текст;
	КонецЕсли;
	
	// Установим полученную версию.
	ИсходнаяВерсия = Версия;
	Версия = СборщикДанных.Версия;
	
	Если ЗначениеЗаполнено(ПроверкаВерсии) Тогда
		ДокументПроверки = ПроверкаВерсии.ПолучитьОбъект();
		ДокументПроверки.Версия = Версия;
		ДокументПроверки.Эталон = ИсходнаяВерсия;
		ДокументПроверки.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	СоставОбъектовДляПроверки = СопоставитьОбъектыДляПроверки(СоставОбъектовДляПроверки);
	СопоставитьОтветственных();
	
	ЗаполнитьКоличествоОбъектовДляПроверки(СоставОбъектовДляПроверки);
	
	ПолучитьТаблицуСтруктурыКонфигурации(Версия);
	
	Возврат "";
	
КонецФункции

// Получает таблицу объектов структуры конфигурации.
// Делать отбор по расширению не требуется, так как необходимо получить все объекты и конфигурации и расширения.
//
Функция ПолучитьТаблицуСтруктурыКонфигурации(Версия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка,
	|	СтруктураКонфигурации.Родитель,
	|	СтруктураКонфигурации.ТипОбъекта
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Версия);
	
	ТаблицаОбъектовКонфигурации = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОбъектовКонфигурации.Индексы.Добавить("Ссылка");
	ТаблицаОбъектовКонфигурации.Индексы.Добавить("Родитель");
	ТаблицаОбъектовКонфигурации.Индексы.Добавить("Ссылка, Родитель");
	
КонецФункции

// Устанавливает ответственных для версии из предыдущей версии
// в соответствии с номером версии.
//
Процедура СопоставитьОтветственных()
	
	Если (НЕ ЗначениеЗаполнено(ИсходнаяВерсия)) ИЛИ (ИсходнаяВерсия = Версия) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеОтветственные = Новый Соответствие;
	
	ЗапросПоИсходнымОбъектам = Новый Запрос;
	ЗапросПоИсходнымОбъектам.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Путь КАК Путь,
	|	СтруктураКонфигурации.Ответственный КАК Ответственный
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Версия
	|	И НЕ СтруктураКонфигурации.Ответственный.Ссылка ЕСТЬ NULL";
	
	ЗапросПоИсходнымОбъектам.УстановитьПараметр("Версия", ИсходнаяВерсия);
	ИсходныеОтветственные = ЗапросПоИсходнымОбъектам.Выполнить().Выгрузить();
	ИсходныеОтветственные.Индексы.Добавить("Путь");
	
	ЗапросПоТекущимОбъектам = Новый Запрос;
	ЗапросПоТекущимОбъектам.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Версия";
	
	ЗапросПоТекущимОбъектам.УстановитьПараметр("Версия", Версия);
	ВыборкаОбъектов = ЗапросПоТекущимОбъектам.Выполнить().Выбрать();
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ИсходныйОбъект = ИсходныеОтветственные.Найти(ВыборкаОбъектов.Путь, "Путь");
		
		Если ИсходныйОбъект <> Неопределено Тогда
			
			Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
			Объект.Ответственный = ИсходныйОбъект.Ответственный;
			Объект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает информацию о структуре конфигурации или расширения по версии
//
Функция ОчисткаДанныхСобранныхРанееПоСобираемымОбъектам(Знач Расширение = Неопределено)
	
	ВерсияУстановитьФлагиСбораДанных(Ложь, Расширение);
	
	ЗапросПоОбъектамКонфигурации = Новый Запрос;
	ЗапросПоОбъектамКонфигурации.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Объект,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец
	|	И НЕ СтруктураКонфигурации.ПометкаУдаления
	|	И СтруктураКонфигурации.Расширение = &Расширение";
	
	ЗапросПоОбъектамКонфигурации.УстановитьПараметр("Расширение", Расширение);
	ЗапросПоОбъектамКонфигурации.УстановитьПараметр("Владелец", Версия);
	Выборка = ЗапросПоОбъектамКонфигурации.Выполнить().Выбрать();
	
	Счетчик = 1;
	КоличествоОбъектов = Выборка.Количество();
	ТекстСостоянияШаблон = НСтр("ru='Выполняется очистка сведений о метаданных. Обработан объект №%1 из %2 - %3'");
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейСоставныхСвойствОбъектов = РегистрыСведений.ЗначенияСоставныхСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСоставныхСвойствОбъектов.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписейСоставныхСвойствОбъектов.Записать();
		
		НаборЗаписейСвойствОбъектов = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейСвойствОбъектов.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписейСвойствОбъектов.Записать();
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		
		ТекстСостояния = СтрШаблон(ТекстСостоянияШаблон, Счетчик, КоличествоОбъектов, Выборка.Путь);
		Состояние(ТекстСостояния);
		#КонецЕсли
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецФункции

Функция ОжиданиеЗавершенияОперации(ФайлРезультатаОперации, НаименованиеОперации = "")
	
	Статус = "";
	
	#Если Клиент Тогда
	
	НачалоОжидания = ТекущаяДатаСеанса();
	
	ФайлСкриптаПаузы = ПолучитьИмяВременногоФайла("vbs");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку("WScript.Sleep WScript.Arguments(0)");
	ТекстовыйДокумент.Записать(ФайлСкриптаПаузы, КодировкаТекста.ANSI);
	
	ОбъектWScript = Новый COMОбъект("WScript.Shell");
	КомандаПаузы = "WScript.exe ""%1"" %2";
	КомандаПаузы = СтрШаблон(КомандаПаузы, ФайлСкриптаПаузы, "10000");
	
	ЧтениеТекста = Новый ЧтениеТекста;
	
	ТекстСостояния = НСтр("ru='Ожидание завершения операции ""%1""'");
	ТекстСостояния = СтрШаблон(ТекстСостояния, НаименованиеОперации);
	Состояние(ТекстСостояния);
	
	Пока Истина Цикл
		
		// Пауза 10 секунд.
		ОбъектWScript.Run(КомандаПаузы, 0, 1);
		
		// Ожидаем не более 5 часов.
		ВремяОжидания = ТекущаяДатаСеанса() - НачалоОжидания;
		Если ВремяОжидания > 5 * 60 * 60 Тогда
			Статус = НСтр("ru='Время ожидания завершения операции ""%1"" превышает 5 часов.'");
			Статус = СтрШаблон(Статус, НаименованиеОперации);
			Прервать;
		КонецЕсли;
		
		Если НЕ ФайлСуществует(ФайлРезультатаОперации) Тогда
			Статус = НСтр("ru='Не найден файл с результатами операции ""%1"" по пути: %2'");
			Статус = СтрШаблон(Статус, НаименованиеОперации, ФайлРезультатаОперации);
			Возврат Статус;
		КонецЕсли;
		
		// Проверяем, можно ли открыть файл на чтение монопольно.
		Попытка
			ЧтениеТекста.Открыть(ФайлРезультатаОперации);
			ЧтениеТекста.Закрыть();
			
			// Если да, то платформенная проверка закончилась, прерываем цикл.
			Прервать;
		Исключение
		КонецПопытки;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	Состояние("");
	
	ФайлУдалить(ФайлСкриптаПаузы);
	ОбъектWScript = Неопределено;
	
	#КонецЕсли
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область УправлениеТребованиями

// Получает структуру этапов проверки согласно требованиям.
//
Функция ПолучитьЭтапыПроверкиПоТребованиям(СписокТребований = Неопределено) Экспорт
	
	ТаблицаПроверокПоТребованиям = Новый ТаблицаЗначений;
	
	Если СписокТребований <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТребованияЭтапыПроверки.Этап КАК Этап
		|ИЗ
		|	Справочник.Требования.ЭтапыПроверки КАК ТребованияЭтапыПроверки
		|ГДЕ
		|	ТребованияЭтапыПроверки.Ссылка В (&СписокТребований)";
		
		Запрос.УстановитьПараметр("СписокТребований", СписокТребований);
		
		ТаблицаПроверокПоТребованиям = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ЭтапыПроверкиПоТребованиям = Новый Структура;
	Для Каждого ТекущийЭтап Из Метаданные.Перечисления.ЭтапыПроверки.ЗначенияПеречисления Цикл
		ИмяЭтапа = ТекущийЭтап.Имя;
		
		СтрокаТаблицы = ТаблицаПроверокПоТребованиям.Найти(Перечисления.ЭтапыПроверки[ИмяЭтапа]);
		Выполнять = (СтрокаТаблицы <> Неопределено);
		
		ЭтапыПроверкиПоТребованиям.Вставить(ИмяЭтапа, Выполнять);
	КонецЦикла;
	
	Возврат ЭтапыПроверкиПоТребованиям;
	
КонецФункции

Функция ПолучитьГруппуТребованийРазработкаИИспользованиеБиблиотек()
	
	НаименованиеГруппы = НСтр("ru='Разработка и использование библиотек'");
	СистемаСтандартов = Справочники.Требования.СистемаСтандартов;
	
	ГруппаТребований = Справочники.Требования.НайтиПоНаименованию(НаименованиеГруппы, Истина, СистемаСтандартов);
	
	Если ГруппаТребований = Неопределено Тогда
		ГруппаТребований = Справочники.Требования.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ГруппаТребований;
	
КонецФункции

// Возвращает список требований, выбранный в карточке конфигурации.
//
Функция ПолучитьСписокТребований(КэшУстановленныхФлажков, НомерПроверки) Экспорт
	
	ЗапросПоТребованиям = Новый Запрос;
	ЗапросПоТребованиям.Текст = "
	|ВЫБРАТЬ
	|	Требования.Ссылка КАК Требование
	|ИЗ
	|	Справочник.Требования КАК Требования
	|ГДЕ
	|	НЕ Требования.ЭтоГруппа
	|	И НЕ Требования.ПометкаУдаления
	|	%1
	|	%2
	|	%3
	|	%4
	|УПОРЯДОЧИТЬ ПО
	|	Требования.Код";
	
	Если ТипЗнч(КэшУстановленныхФлажков) = Тип("ТаблицаЗначений") Тогда
		МассивВыбранныхТребований = КэшУстановленныхФлажков.ВыгрузитьКолонку("Ссылка");
	Иначе
		МассивВыбранныхТребований = Новый Массив;
	КонецЕсли;
	
	УсловиеПоВыбраннымТребованиям = "";
	Если МассивВыбранныхТребований.Количество() > 0 Тогда
		УсловиеПоВыбраннымТребованиям = "И Требования.Ссылка В(&МассивВыбранныхТребований)";
		ЗапросПоТребованиям.УстановитьПараметр("МассивВыбранныхТребований", МассивВыбранныхТребований);
	КонецЕсли;
	
	Если (НомерПроверки = 1) И (НЕ ЗначениеЗаполнено(Версия)) Тогда
		ОпределитьРежимЗапускаПриложения();
	КонецЕсли;
	УсловиеПоРежиму = "И Требования." + ?(Конфигурация.ТолькоОбычныйРежим, "ОбычноеПриложение", "УправляемоеПриложение");
	
	УсловиеПоБиблиотеке = "";
	Если НЕ Конфигурация.ЭтоБиблиотека Тогда
		ГруппаТребований = ПолучитьГруппуТребованийРазработкаИИспользованиеБиблиотек();
		УсловиеПоБиблиотеке = "И НЕ Требования.Родитель = &ГруппаТребований";
		ЗапросПоТребованиям.УстановитьПараметр("ГруппаТребований", ГруппаТребований);
	КонецЕсли;
	
	УсловиеПоДополнительнымТребованиям = "";
	Если НЕ Конфигурация.РасширеннаяПроверкаПоДополнительнымТребованиям Тогда
		МассивВнутреннихТребований = ПолучитьВнутренниеТребования();
		УсловиеПоДополнительнымТребованиям = "И НЕ Требования.Ссылка В(&МассивВнутреннихТребований)";
		ЗапросПоТребованиям.УстановитьПараметр("МассивВнутреннихТребований", МассивВнутреннихТребований);
	КонецЕсли;
	
	ЗапросПоТребованиям.Текст = СтрШаблон(ЗапросПоТребованиям.Текст,
		УсловиеПоВыбраннымТребованиям,
		УсловиеПоРежиму,
		УсловиеПоБиблиотеке,
		УсловиеПоДополнительнымТребованиям);
	
	ТаблицаТребований = ЗапросПоТребованиям.Выполнить().Выгрузить();
	МассивТребований = ТаблицаТребований.ВыгрузитьКолонку("Требование");
	
	СписокТребований = Новый СписокЗначений;
	СписокТребований.ЗагрузитьЗначения(МассивТребований);
	
	Возврат СписокТребований;
	
КонецФункции

// Процедура, необходимая для создания таблицы значений, хранящей
// выбранные пользователем требования в карточке запуска проверки.
//
Процедура ПрочитатьТребования(КэшУстановленныхФлажков, ФлагПроверкаПоРасписанию = Ложь,
	ТекущийВариантПроверки = Неопределено) Экспорт
	
	Если ФлагПроверкаПоРасписанию Тогда
		ВариантПроверки = ВариантПроверкиПоРасписанию;
	Иначе
		Если ЗначениеЗаполнено(ТекущийВариантПроверки) Тогда
			ВариантПроверки = ТекущийВариантПроверки;
		Иначе
			ВариантПроверки = Конфигурация.ВариантПроверкиВручную;
		КонецЕсли;
	КонецЕсли;
	
	КэшУстановленныхФлажков = ЗаполнитьТаблицуТребований(Конфигурация, ВариантПроверки);
	
	Если НЕ ФлагПроверкаПоРасписанию Тогда
		КэшУстановленныхФлажковЭлементы = ПолучитьЭлементыИзКэшаУстановленныхФлажковТребований(КэшУстановленныхФлажков);
		Для Каждого СтрокаКэшаУстановленныхФлажков Из КэшУстановленныхФлажковЭлементы Цикл
			УстановитьФлажокРодителюОбъекта(СтрокаКэшаУстановленныхФлажков.Ссылка, Справочники.Требования.ПустаяСсылка(),
				КэшУстановленныхФлажков);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеОбъектами

// Возвращает массив объектов на проверку. В массив попадают только объекты, выбранные на форме запуска проверки.
// Если на форме не выбран ни один объект, то по умолчанию будут проверены все объекты конфигурации.
//
Функция ПолучитьСоставОбъектовДляПроверки(ФлагПроверитьВсе, КэшУстановленныхФлажковСпискаОбъектов, СписокРасширений) Экспорт
	
	СоставОбъектовДляПроверки = Новый Массив;
	
	Если ФлагПроверитьВсе Тогда
		Возврат СоставОбъектовДляПроверки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаКЭШ.Ссылка,
	|	ТаблицаКЭШ.Значение КАК Пометка
	|ПОМЕСТИТЬ ВТ_ТаблицаКЭШ
	|ИЗ
	|	&ТаблицаКЭШ КАК ТаблицаКЭШ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаКЭШ.Ссылка
	|ИЗ
	|	ВТ_ТаблицаКЭШ КАК ВТ_ТаблицаКЭШ
	|ГДЕ
	|	ВТ_ТаблицаКЭШ.Пометка = 1
	|	И ВТ_ТаблицаКЭШ.Ссылка.Расширение В(&СписокРасширений)";
	
	Запрос.УстановитьПараметр("ТаблицаКЭШ", КэшУстановленныхФлажковСпискаОбъектов);
	Запрос.УстановитьПараметр("СписокРасширений", СписокРасширений);
	Выборка = Запрос.Выполнить();
	Если НЕ Выборка.Пустой() Тогда
		СоставОбъектовДляПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат СоставОбъектовДляПроверки;
	
КонецФункции

Функция СопоставитьОбъектыДляПроверки(СоставОбъектовДляПроверки)
	
	Если НЕ ЗначениеЗаполнено(СоставОбъектовДляПроверки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ИсходнаяВерсия)) ИЛИ (ИсходнаяВерсия = Версия) Тогда
		Возврат СоставОбъектовДляПроверки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтруктураКонфигурации.Ссылка КАК Ссылка,
	|	СтруктураКонфигурации.Путь КАК Путь
	|ИЗ
	|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
	|ГДЕ
	|	СтруктураКонфигурации.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Версия);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Путь");
	
	НовыйСоставОбъектовДляПроверки = Новый Массив;
	
	Для Каждого ОбъектДляПроверки Из СоставОбъектовДляПроверки Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ИсходныйОбъект = Результат.Найти(ОбъектДляПроверки.Путь, "Путь");
		
		Если ИсходныйОбъект <> Неопределено Тогда
			НовыйСоставОбъектовДляПроверки.Добавить(ИсходныйОбъект.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйСоставОбъектовДляПроверки;
	
КонецФункции

Процедура ЗаполнитьКоличествоОбъектовДляПроверки(СоставОбъектовДляПроверки) Экспорт
	
	КоличествоОбъектовВыборочно = ?(СоставОбъектовДляПроверки = Неопределено, 0, СоставОбъектовДляПроверки.Количество());
	КоличествоОбъектовОбщее = ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация);
	КоличествоОбъектовСобраныСведения = ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация, Истина);
	
	// При проверке были выбраны конкретные объекты в дереве.
	Если КоличествоОбъектовВыборочно > 0 Тогда
		ПроверяемыеОбъекты = СтрШаблон(НСтр("ru='Выборочно (%1 из %2)'"), КоличествоОбъектовВыборочно,
			КоличествоОбъектовОбщее);
	ИначеЕсли КоличествоОбъектовСобраныСведения = КоличествоОбъектовОбщее Тогда
		// У конфигурации нет фильтров.
		ПроверяемыеОбъекты = СтрШаблон(НСтр("ru='Все объекты (%1)'"), КоличествоОбъектовОбщее);
	Иначе
		// У конфигурации настроены фильтры для объектов.
		ПроверяемыеОбъекты = СтрШаблон(НСтр("ru='Выборочно (%1 из %2)'"), КоличествоОбъектовСобраныСведения,
			КоличествоОбъектовОбщее);
	КонецЕсли;
	
	СтруктураПроверки.Вставить("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
КонецПроцедуры

Процедура СообщитьКоличествоОбъектовДляПроверки(СоставОбъектовДляПроверки)
	
	КоличествоОбъектовВыборочно = ?(СоставОбъектовДляПроверки = Неопределено, 0, СоставОбъектовДляПроверки.Количество());
	КоличествоОбъектовОбщее = ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация);
	КоличествоОбъектовСобраныСведения = ПолучитьОбщееКоличествоОбъектовКонфигурации(Версия, Конфигурация, Истина);
	
	Текст = НСтр("ru='Выбрано объектов для проверки: %1'");
	
	// При проверке были выбраны конкретные объекты в дереве.
	Если КоличествоОбъектовВыборочно > 0 Тогда
		КоличествоОбъектов = СтрШаблон(НСтр("ru='%1 из %2'"), КоличествоОбъектовВыборочно, КоличествоОбъектовОбщее);
	ИначеЕсли КоличествоОбъектовСобраныСведения = КоличествоОбъектовОбщее Тогда
		// У конфигурации нет фильтров.
		КоличествоОбъектов = СтрШаблон(НСтр("ru='все (%1)'"), КоличествоОбъектовОбщее);
	Иначе
		// У конфигурации настроены фильтры для объектов.
		КоличествоОбъектов = СтрШаблон(НСтр("ru='%1 из %2 с учетом исключений'"), КоличествоОбъектовСобраныСведения,
			КоличествоОбъектовОбщее);
	КонецЕсли;
	
	Текст = СтрШаблон(Текст, КоличествоОбъектов);
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	
КонецПроцедуры

// Процедура, необходимая для создания таблицы значений, хранящей
// выбранные пользователем объекты в карточке запуска проверки.
//
Процедура ПрочитатьОбъекты(КэшУстановленныхФлажков) Экспорт
	
	Если КэшУстановленныхФлажков = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СтруктураКонфигурации.Ссылка,
		|	СтруктураКонфигурации.Пометка КАК Значение
		|ИЗ
		|	Справочник.СтруктураКонфигурации КАК СтруктураКонфигурации
		|ГДЕ
		|	СтруктураКонфигурации.Владелец = &Владелец
		|	И СтруктураКонфигурации.Пометка <> 0";
		Запрос.УстановитьПараметр("Владелец", Версия);
		КэшУстановленныхФлажков = Запрос.Выполнить().Выгрузить();
		КэшУстановленныхФлажков.Индексы.Добавить("Ссылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Меняет значение флажка у родителя требований в зависимости
// от нового значения флажка одного из его потомков.
//
Функция УстановитьФлажокРодителюОбъектаПроверки(Ссылка, ПустаяСсылка, Версия, КэшУстановленныхФлажков) Экспорт
	
	Родитель = Ссылка.Родитель;
	Если Родитель = ПустаяСсылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоВеткаМетаданных = (Родитель.ТипОбъекта = Перечисления.ТипыОбъектов.ВеткаМетаданных);
	
	РодительПометка = НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Родитель);
	Если (НЕ ЭтоВеткаМетаданных) И (РодительПометка = 1) Тогда
		Возврат УстановитьФлажокРодителюОбъектаПроверки(Родитель, ПустаяСсылка, Версия, КэшУстановленныхФлажков);
	КонецЕсли;
	
	ЕстьНезаполненные = ПроверкаНезаполненныхФлажковОбъектовПроверки(КэшУстановленныхФлажков, Родитель);
	ЕстьЗаполненные = ПроверкаЗаполненностиФлажковОбъектовПроверки(КэшУстановленныхФлажков, Родитель);
	НовоеЗначение = ?(ЕстьНезаполненные, ?(ЕстьЗаполненные, 2, 0), ?(ЭтоВеткаМетаданных, 1, 2));
	Если (НЕ ЭтоВеткаМетаданных) И (НовоеЗначение = 1) Тогда
		Возврат УстановитьФлажокРодителюОбъектаПроверки(Родитель, ПустаяСсылка, Версия, КэшУстановленныхФлажков);
	КонецЕсли;
	
	ИзменитьКэшУстановленныхФлажков(КэшУстановленныхФлажков, Родитель, НовоеЗначение);
	
	Возврат УстановитьФлажокРодителюОбъектаПроверки(Родитель, ПустаяСсылка, Версия, КэшУстановленныхФлажков);
	
КонецФункции

// Меняет значение флажков потомков объектов в зависимости от нового значения флага родителя.
//
Функция УстановитьФлажкиПодчиненнымОбъектамПроверки(ТекущаяСсылка, НовоеЗначение, СтароеЗначение, Версия,
	КэшУстановленныхФлажков, ТипыОбъектов = Неопределено) Экспорт
	
	ТипыОбъектов = ?(ТипыОбъектов = Неопределено, ПолучитьТипыОбъектовРодителей(), ТипыОбъектов);
	Если ТипыОбъектов.Найти(ТекущаяСсылка.ТипОбъекта) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивОбъектов = ПолучитьМассивПодчиненныхОбъектовПроверки(ТекущаяСсылка);
	Для Каждого Объект Из МассивОбъектов Цикл
		Ссылка = Объект.Ссылка;
		
		ИзменитьКэшУстановленныхФлажков(КэшУстановленныхФлажков, Ссылка, НовоеЗначение);
		
		Если Объект.ТипОбъекта = Перечисления.ТипыОбъектов.Подсистема Тогда
			УстановитьФлажкиОбъектамПроверкиПодсистемы(Ссылка, НовоеЗначение, СтароеЗначение, Версия, КэшУстановленныхФлажков);
		КонецЕсли;
		
		УстановитьФлажкиПодчиненнымОбъектамПроверки(Ссылка, НовоеЗначение, СтароеЗначение, Версия,
			КэшУстановленныхФлажков, ТипыОбъектов);
		
	КонецЦикла;
	
КонецФункции

// Устанавливает флажки объектам конфигурации.
// Параметры:
//   ТекущаяСсылка - Ссылка на элемент конфигурации.
//   НовоеЗначение - Устанавливаемое значение.
//   СтароеЗначение - Старое значение.
//   Версия - Версия конфигурации.
//
Функция УстановитьФлажкиОбъектамПроверки(ТекущаяСсылка, НовоеЗначение, СтароеЗначение, Версия,
	КэшУстановленныхФлажков) Экспорт
	
	ФлагВыбораВсех = (ТекущаяСсылка = Справочники.СтруктураКонфигурации.ПустаяСсылка());
	
	Если НЕ ФлагВыбораВсех Тогда
		
		ИзменитьКэшУстановленныхФлажков(КэшУстановленныхФлажков, ТекущаяСсылка, НовоеЗначение);
		
		Если ТекущаяСсылка.ТипОбъекта = Перечисления.ТипыОбъектов.Подсистема Тогда
			УстановитьФлажкиОбъектамПроверкиПодсистемы(ТекущаяСсылка, НовоеЗначение, СтароеЗначение, Версия,
				КэшУстановленныхФлажков);
		КонецЕсли;
		
	КонецЕсли;
	
	ТипыОбъектов = ПолучитьТипыОбъектовРодителей();
	
	УстановитьФлажкиПодчиненнымОбъектамПроверки(ТекущаяСсылка, НовоеЗначение, СтароеЗначение, Версия,
		КэшУстановленныхФлажков, ТипыОбъектов);
	
	Если НЕ ФлагВыбораВсех Тогда
		
		УстановитьФлажокРодителюОбъектаПроверки(ТекущаяСсылка, Справочники.СтруктураКонфигурации.ПустаяСсылка(), Версия,
			КэшУстановленныхФлажков);
		
	КонецЕсли;
	
КонецФункции

// Устанавливает флажки объектам подсистемы.
// Параметры:
//   Подсистема - Ссылка на элемент конфигурации.
//   НовоеЗначение - Устанавливаемое значение.
//   СтароеЗначение - Старое значение.
//   Версия - Версия конфигурации.
//   КэшУстановленныхФлажков - Кэш установленных флажков.
//
Функция УстановитьФлажкиОбъектамПроверкиПодсистемы(Подсистема, НовоеЗначение, СтароеЗначение, Версия,
	КэшУстановленныхФлажков) Экспорт
	
	ТаблицаОбъектов = ПолучитьТаблицуОбъектовПроверкиПодсистемы(Подсистема, Версия);
	Для Каждого Объект Из ТаблицаОбъектов Цикл
		
		УстановитьФлажкиОбъектамПроверки(Объект.Ссылка, НовоеЗначение, СтароеЗначение, Версия, КэшУстановленныхФлажков);
		УстановитьФлажокРодителюОбъектаПроверки(Объект.Ссылка, Справочники.СтруктураКонфигурации.ПустаяСсылка(), Версия,
			КэшУстановленныхФлажков);
		
	КонецЦикла;
	
КонецФункции

// Получает объекты всех уровней, входящих в переданную подсистему.
//
Функция ПолучитьТаблицуОбъектовПроверкиПодсистемы(Подсистема, Версия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОбъектовКонфигурации.Ссылка
	|ПОМЕСТИТЬ ВТ_ТаблицаОбъектовКонфигурации
	|ИЗ
	|	&ТаблицаОбъектовКонфигурации КАК ТаблицаОбъектовКонфигурации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбъектовКонфигурации.Ссылка
	|ИЗ
	|	ВТ_ТаблицаОбъектовКонфигурации КАК ВТ_ТаблицаОбъектовКонфигурации
	|ГДЕ
	|	ВТ_ТаблицаОбъектовКонфигурации.Ссылка.Подсистемы.Подсистема = &Подсистема
	|	И ВТ_ТаблицаОбъектовКонфигурации.Ссылка.ТипОбъекта <> &ТипОбъекта";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектовКонфигурации", ТаблицаОбъектовКонфигурации);
	Запрос.УстановитьПараметр("Подсистема", Подсистема);
	Запрос.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектов.ВеткаМетаданных);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьМассивПодчиненныхОбъектовПроверки(Родитель)
	
	Возврат ТаблицаОбъектовКонфигурации.НайтиСтроки(Новый Структура("Родитель", Родитель));
	
КонецФункции

// Проверяет значение заполненных флагов.
//
Функция ПроверкаЗаполненностиФлажковОбъектовПроверки(КэшУстановленныхФлажков, Ссылка) Экспорт
	
	МассивОбъектов = ПолучитьМассивПодчиненныхОбъектовПроверки(Ссылка);
	Для Каждого Объект Из МассивОбъектов Цикл
		
		ЗначениеФлажка = НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Объект.Ссылка);
		Если ЗначениеФлажка > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет значение незаполненных флагов.
//
Функция ПроверкаНезаполненныхФлажковОбъектовПроверки(КэшУстановленныхФлажков, Ссылка)
	
	МассивОбъектов = ПолучитьМассивПодчиненныхОбъектовПроверки(Ссылка);
	Для Каждого Объект Из МассивОбъектов Цикл
		
		ЗначениеФлажка = НайтиВКэшеУстановленныхФлажков(КэшУстановленныхФлажков, Объект.Ссылка);
		Если ЗначениеФлажка <> 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область УправлениеДокументомПроверкаВерсии

// Проверяет последний документ проверки версии.
// Если у документа статус "Выполняется", то устанавливает статус "Ошибка"
// и дописывает в журнал проверки "Вероятно, проверка была прервана пользователем".
//
Процедура ПроверитьПоследнийДокументПроверкиВерсии()
	
	ЗапросДокументы = Новый Запрос;
	ЗапросДокументы.Текст = "
	|ВЫБРАТЬ
	|	ПроверкаВерсии.Ссылка
	|ИЗ
	|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
	|ГДЕ
	|	ПроверкаВерсии.Конфигурация = &Конфигурация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроверкаВерсии.Дата УБЫВ";
	
	ЗапросДокументы.УстановитьПараметр("Конфигурация", Конфигурация);
	Выборка = ЗапросДокументы.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = Выборка.Ссылка;
	Если СтрСравнить(ДокументСсылка.Статус, "Выполняется") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Вероятно, проверка была прервана пользователем.'");
	
	ЖурналПроверки = ДокументСсылка.ЖурналПроверки;
	ЖурналПроверки = СтрШаблон("%1%2%3", ЖурналПроверки, Символы.ПС, ТекстОшибки);
	
	Попытка
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.Статус = "Ошибка";
		ДокументОбъект.ЖурналПроверки = ЖурналПроверки;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьДокументПроверкиВерсии() Экспорт
	
	ПроверитьПоследнийДокументПроверкиВерсии();
	
	ИнициализироватьСтруктуруПроверки();
	
	СтруктураПроверки.ВремяНачала = ТекущаяДатаСеанса();
	СтруктураПроверки.РегистрироватьВсеОшибкиКакОсобенности = РегистрироватьВсеОшибкиКакОсобенности;
	
	ДокументПроверки = Документы.ПроверкаВерсии.СоздатьДокумент();
	ДокументПроверки.Дата = ТекущаяДатаСеанса();
	ДокументПроверки.УстановитьНовыйНомер();
	ДокументПроверки.РегистрироватьВсеОшибкиКакОсобенности = РегистрироватьВсеОшибкиКакОсобенности;
	
	Если ЗначениеЗаполнено(Версия) Тогда
		ДокументПроверки.Версия = Версия;
		ДокументПроверки.Эталон = Версия;
	КонецЕсли;
	
	ДокументПроверки.Записать(РежимЗаписиДокумента.Запись);
	ПроверкаВерсии = ДокументПроверки.Ссылка;
	
	Текст = НСтр("ru='Создан документ'") + " " + ПроверкаВерсии;
	Зафиксировать(Конфигурация.Наименование, УровеньИнформация, Текст, СтруктураПроверки.ЖурналПроверки);
	
КонецПроцедуры

Процедура ЗаписатьДокументПроверкиВерсии(СтатусПроверки = "", СоздаватьВерсию = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПроверкаВерсии) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПроверки = ПроверкаВерсии.ПолучитьОбъект();
	
	Если СоздаватьВерсию Тогда
		Если НЕ ЗначениеЗаполнено(ДокументПроверки.Версия) Тогда
			НоваяВерсия = Справочники.Версии.СоздатьЭлемент();
			НоваяВерсия.Владелец = Конфигурация;
			НоваяВерсия.Наименование = НСтр("ru='Не определена'");
			НоваяВерсия.Код = "0.0.0";
			НоваяВерсия.Записать();
			
			ДокументПроверки.Версия = НоваяВерсия.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПроверки.ВремяОкончания = ТекущаяДатаСеанса();
	ОбщееВремя = СтруктураПроверки.ВремяОкончания - СтруктураПроверки.ВремяНачала;
	СтруктураПроверки.ОбщееВремя = ПолучитьВремяВФормате(ОбщееВремя);
	СтруктураПроверки.Статус = ?(ПустаяСтрока(СтатусПроверки), "Выполняется", СтатусПроверки);
	
	ЗаполнитьЗначенияСвойств(ДокументПроверки, СтруктураПроверки);
	
	ДокументПроверки.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру с заполненными параметрами проверки.
//
Функция ЗаполнитьПараметрыПроверки(ЭтапыПроверкиПоТребованиям = Неопределено,
	ПроверитьПлатформуДляЗапускаПроверки = Истина,
	ПроверитьСоединениеСБазой = Истина,
	ЗагрузитьКонфигурациюИзХранилища = Истина,
	НастройкиХранилища = Неопределено,
	ПроверитьВерсиюКонфигурации = Истина,
	ОпределятьРежимЗапуска = Истина,
	ОчищатьСобранныеДанные = Истина,
	ПостроитьСтруктуру = Истина,
	ПроверитьКонфигурацию = Истина) Экспорт
	
	Если ЭтапыПроверкиПоТребованиям = Неопределено Тогда
		ЭтапыПроверкиПоТребованиям = ПолучитьЭтапыПроверкиПоТребованиям();
	КонецЕсли;
	
	Если НастройкиХранилища = Неопределено Тогда
		НастройкиХранилища = Новый Структура;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ПроверитьПлатформуДляЗапускаПроверки", ПроверитьПлатформуДляЗапускаПроверки);
	ПараметрыПроверки.Вставить("ПроверитьСоединениеСБазой", ПроверитьСоединениеСБазой);
	ПараметрыПроверки.Вставить("ЗагрузитьКонфигурациюИзХранилища", ЗагрузитьКонфигурациюИзХранилища);
	ПараметрыПроверки.Вставить("НастройкиХранилища", НастройкиХранилища);
	ПараметрыПроверки.Вставить("ПроверитьВерсиюКонфигурации", ПроверитьВерсиюКонфигурации);
	ПараметрыПроверки.Вставить("ОпределятьРежимЗапуска", ОпределятьРежимЗапуска);
	ПараметрыПроверки.Вставить("ОчищатьСобранныеДанные", ОчищатьСобранныеДанные);
	ПараметрыПроверки.Вставить("ПостроитьСтруктуру", ПостроитьСтруктуру);
	ПараметрыПроверки.Вставить("ПроверитьКонфигурацию", ПроверитьКонфигурацию);
	ПараметрыПроверки.Вставить("ЭтапыПроверкиПоТребованиям", ЭтапыПроверкиПоТребованиям);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

Процедура ВерсияУстановитьФлагиСбораДанных(ЗначениеФлага = Истина, Расширение = Неопределено)
	
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанные", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОМетаданных", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОФормах", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОМодулях", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОРолях", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОМакетах", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеОСправке", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеПоПроверкеКонфигурации", ЗначениеФлага, Расширение);
	ВерсияУстановитьФлагСбораДанных(Версия, "СобраныДанныеПоПроверкеПримененияРасширения", ЗначениеФлага, Расширение);
	
КонецПроцедуры

Функция ПолучитьМассивИсключенийОшибокВыгрузки()
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Конфигурация содержит объекты метаданных, длина имен которых превышает 80 символов!");
	
	Возврат МассивИсключений;
	
КонецФункции

// Возвращает информацию о настройках проверки конфигурации.
// Если не выбран ни один объект конфигурации, то по умолчанию
// будут проверены все объекты конфигурации.
// Если не указано ни одно требование, то по умолчанию
// конфигурация будет проверяться по всем требованиям.
//
Функция ПолучитьТекстОписанияНастроек(НомерПроверки, КэшУстановленныхФлажков, СоставОбъектовДляПроверки,
	ФлажокЗагрузитьКонфигурациюИзХранилища, КаталогХранилища, ФлажокВыполнятьРассылкуРезультатовПроверки,
	Сценарий, СписокРасширений) Экспорт
	
	КоличествоОбъектовДляПроверки = СоставОбъектовДляПроверки.Количество();
	Если КэшУстановленныхФлажков.Количество() = 0 Тогда
		КоличествоТребований = 0;
	Иначе
		КоличествоТребований = ПолучитьСписокТребований(КэшУстановленныхФлажков, НомерПроверки).Количество();
	КонецЕсли;
	
	Если НомерПроверки = 1 Тогда
		
		ПользовательТекст = ?(ЗначениеЗаполнено(Пользователь), Пользователь, НСтр("ru='<не задан>'"));
		ПарольТекст = ?(ЗначениеЗаполнено(Пароль), Пароль, НСтр("ru='<не задан>'"));
		
		Текст = СтрШаблон(НСтр("ru='Каталог: %1;%4Пользователь: %2; Пароль: %3%4'"),
			КаталогКонфигурации, ПользовательТекст, ПарольТекст, Символы.ПС);
		
	ИначеЕсли НомерПроверки = 2 Тогда
		
		ВерсияТекст = ?(ЗначениеЗаполнено(Версия), Версия, НСтр("ru='<не указана>'"));
		Текст = СтрШаблон(НСтр("ru='Версия на проверку: %1'"), ВерсияТекст) + Символы.ПС;
		
	КонецЕсли;
	
	КоличествоОбъектовТекст = ?(КоличествоОбъектовДляПроверки = 0, НСтр("ru='все'"), КоличествоОбъектовДляПроверки);
	КоличествоТребованийТекст = ?(КоличествоТребований = 0, НСтр("ru='все'"), КоличествоТребований);
	
	Текст = Текст + СтрШаблон(НСтр("ru='Проверяемые объекты (%1), проверяемые требования (%2)'"),
		КоличествоОбъектовТекст, КоличествоТребованийТекст) + Символы.ПС;
		
	Если Сценарий = 0 Тогда
		ТекстСценария = НСтр("ru='Конфигурация'");
	Иначе
		КоличествоРасширений = СписокРасширений.Количество();
		Если Сценарий = 1 Тогда
			ТекстСценария = НСтр("ru='Расширения (%1)'");
		Иначе
			ТекстСценария = НСтр("ru='Конфигурация и расширения (%1)'");
			КоличествоРасширений = КоличествоРасширений - 1;
		КонецЕсли;
		ТекстСценария = СтрШаблон(ТекстСценария, КоличествоРасширений);
	КонецЕсли;
		
	Текст = Текст + СтрШаблон(НСтр("ru='Сценарий: %1'"), ТекстСценария);
		
	Если (НомерПроверки = 1) И ФлажокЗагрузитьКонфигурациюИзХранилища Тогда
		Текст = Текст + ?(ЗначениеЗаполнено(КаталогХранилища), Символы.ПС
			+ НСтр("ru='Перед проверкой будет выполнена загрузка конфигурации из хранилища:'") + Символы.ПС
			+ КаталогХранилища, "");
	КонецЕсли;
	
	Если (НомерПроверки < 3) И ФлажокВыполнятьРассылкуРезультатовПроверки Тогда
		Текст = Текст + Символы.ПС + НСтр("ru='После проверки будут отправлены отчеты ответственным на почту.'");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Создает массив и заполняет его типами объектов, которые могут иметь подчиненные объекты.
// Возвращаемое значение:
//   Массив, заполненный типами объектов.
//
Функция ПолучитьТипыОбъектовРодителей() Экспорт
	
	ПеречисленияТипы = Перечисления.ТипыОбъектов;
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(ПеречисленияТипы.БизнесПроцесс);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Документ);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ЖурналДокументов);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Задача);
	ТипыОбъектов.Добавить(ПеречисленияТипы.КритерийОтбора);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Обработка);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Отчет);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Перечисление);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланВидовРасчета);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланВидовХарактеристик);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланОбмена);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПланСчетов);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Подсистема);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрБухгалтерии);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрНакопления);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрРасчета);
	ТипыОбъектов.Добавить(ПеречисленияТипы.РегистрСведений);
	ТипыОбъектов.Добавить(ПеречисленияТипы.Справочник);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ХранилищеНастроек);
	
	ТипыОбъектов.Добавить(ПеречисленияТипы.ВеткаМетаданных);
	ТипыОбъектов.Добавить(ПеречисленияТипы.ТабличнаяЧасть);
	
	ТипыОбъектов.Добавить(ПеречисленияТипы.ПустаяСсылка());
	
	Возврат ТипыОбъектов;
	
КонецФункции

// Инициализирует журнал проверки и устанавливает время начала проверки.
//
Функция ИнициализироватьСтруктуруПроверки()
	
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("ЖурналПроверки", "");
	СтруктураПроверки.Вставить("ВремяНачала");
	СтруктураПроверки.Вставить("ВремяОкончания");
	СтруктураПроверки.Вставить("ОбщееВремя");
	СтруктураПроверки.Вставить("ОбнаруженоОшибок");
	СтруктураПроверки.Вставить("ВариантПроверки");
	СтруктураПроверки.Вставить("ПроверяемыеОбъекты");
	СтруктураПроверки.Вставить("Статус");
	СтруктураПроверки.Вставить("ВременныеФайлы", Новый Массив);
	СтруктураПроверки.Вставить("РегистрироватьВсеОшибкиКакОсобенности");
	
КонецФункции

// Копирует исходную проверяемую базу в каталог временных файлов.
//
Процедура СоздатьКопиюКонфигурации() Экспорт
	
	КаталогКонфигурации = ОтредактироватьПутьККаталогу(КаталогКонфигурации);
	
	// Если выбрана проверка со сбором сведений, то скопируем проверяемую базу в каталог временных файлов.
	КаталогКонфигурацииКопия = ПолучитьКаталогВременныхФайлов();
	
	ТекстОшибки = КопироватьБазу(КаталогКонфигурации, КаталогКонфигурацииКопия);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		// Если не удалось скопировать проверяемую базу из указанного каталога на форме,
		// то скопируем ее из каталога конфигурации.
		ТекстОшибки = КопироватьБазу(Конфигурация.КаталогКонфигурации, КаталогКонфигурацииКопия);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		// Если проверяемая база скопирована, добавим путь в массив временных файлов.
		СтруктураПроверки.ВременныеФайлы.Добавить(КаталогКонфигурацииКопия);
		Возврат;
	КонецЕсли;
	
	// Не смогли скопировать проверяемую базу ни из каталога с формы обработки, ни из карточки конфигурации.
	// Переустановим каталог копии базы.
	Если ДемоБазаСуществует(КаталогКонфигурации) Тогда
		КаталогКонфигурацииКопия = КаталогКонфигурации;
	ИначеЕсли ДемоБазаСуществует(Конфигурация.КаталогКонфигурации) Тогда
		КаталогКонфигурацииКопия = Конфигурация.КаталогКонфигурации;
	Иначе
		КаталогКонфигурацииКопия = "";
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все временные файлы и каталоги из массива.
//
Процедура ОчиститьМассивВременныхФайлов() Экспорт
	
	МассивУдаленныхФайлов = Новый Массив;
	
	// Удаляем все временные файлы и каталоги.
	Для Каждого ВременныйФайл Из СтруктураПроверки.ВременныеФайлы Цикл
		
		// Каталог исходной конфигурации удалять не надо.
		Если СтрСравнить(КаталогКонфигурации, ВременныйФайл) = 0
		 ИЛИ СтрСравнить(Конфигурация.КаталогКонфигурации, ВременныйФайл) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлУдалить(ВременныйФайл);
		Если НЕ ФайлСуществует(ВременныйФайл) Тогда
			МассивУдаленныхФайлов.Добавить(ВременныйФайл);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаленныйФайл Из МассивУдаленныхФайлов Цикл
		
		ИндексФайла = СтруктураПроверки.ВременныеФайлы.Найти(УдаленныйФайл);
		Если ИндексФайла <> Неопределено Тогда
			СтруктураПроверки.ВременныеФайлы.Удалить(ИндексФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ИнициализироватьСтруктуруПроверки();
УровеньИнформация = УровеньЖурналаРегистрации.Информация;
УровеньОшибка = УровеньЖурналаРегистрации.Ошибка;

#КонецОбласти

#КонецЕсли