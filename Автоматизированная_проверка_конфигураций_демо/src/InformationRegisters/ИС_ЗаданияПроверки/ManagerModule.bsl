#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьТекущийНомерЗадания() Экспорт
	
	Возврат Константы.ИС_НомераЗаданийПроверки.Получить();
	
КонецФункции

Функция ПолучитьНаборЗаписей(СтруктураПараметров) Экспорт
	НаборЗаписей = РегистрыСведений.ИС_ЗаданияПроверки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЗадания.Установить(СтруктураПараметров["НомерЗадания"]);
	НаборЗаписей.Отбор.Конфигурация.Установить(СтруктураПараметров["Конфигурация"]);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
КонецФункции

Процедура УстановитьУправляемуюБлокировку(НомерЗадания) Экспорт
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ИС_ЗаданияПроверки";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗадания));
	
	Блокировка.Заблокировать();
КонецПроцедуры

Процедура УвеличитьНомерЗадания(НомерЗадания) Экспорт
	Константы.ИС_НомераЗаданийПроверки.Установить(НомерЗадания + 1);		
КонецПроцедуры

Функция ПолучитьКонфигурацииИзОчереди(НомерЗадания) Экспорт
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИС_ЗаданияПроверки.Конфигурация КАК Конфигурация
		|ИЗ
		|	РегистрСведений.ИС_ЗаданияПроверки КАК ИС_ЗаданияПроверки
		|ГДЕ
		|	ИС_ЗаданияПроверки.НомерЗадания <= &НомерЗадания
		|	И ИС_ЗаданияПроверки.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Состояние", Перечисления.ИС_СостоянияЗадачПроверок.ВОчереди);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Конфигурация);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура УстановитьСтатусВыполняется(МассивКонфигураций, НомерЗадания) Экспорт
	Для каждого Конфигурация из МассивКонфигураций Цикл
		НаборЗаписей = РегистрыСведений.ИС_ЗаданияПроверки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Конфигурация.Установить(Конфигурация);
		НаборЗаписей.Прочитать();
		
		Для каждого Запись из НаборЗаписей Цикл
			Если Запись.Состояние = Перечисления.ИС_СостоянияЗадачПроверок.ВОчереди 
				И Запись.НомерЗадания <= НомерЗадания Тогда
				
				Запись.Состояние = Перечисления.ИС_СостоянияЗадачПроверок.ВыполняетсяПроверка;	
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры


Процедура УстановитьСтатусЗавершено(МассивКонфигураций, НомерЗадания) Экспорт
	Для каждого Конфигурация из МассивКонфигураций Цикл
		НаборЗаписей = РегистрыСведений.ИС_ЗаданияПроверки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Конфигурация.Установить(Конфигурация);
		НаборЗаписей.Прочитать();
		
		Для каждого Запись из НаборЗаписей Цикл
			Если Запись.Состояние = Перечисления.ИС_СостоянияЗадачПроверок.ВыполняетсяПроверка
				И Запись.НомерЗадания <= НомерЗадания Тогда
				
				Запись.Состояние = Перечисления.ИС_СостоянияЗадачПроверок.Завершено;	
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

#КонецЕсли
